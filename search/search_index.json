{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to frads documentation Date: 2022-10-26 Version: 0.2.8 frads project is an open source, BSD-licensed library providing easy-to-use wrapper for Radiance rendering engine. Table Of Contents The documentation consists of three parts: Manual : containing manual pages for all the command-line-interfaces. How-To Guides : scenario-based how-to guides Reference : Code API Installation You can find installation instructions on our README . Project Overview Frads is an open-source library providing high-level abstraction of Radiance matrix-based simulation workflows. Frads automates setup of these simulations by providing end users with an open-source, high-level abstraction of the Radiance command-line workflow (Unix toolbox model), helping to reduce the steep learning curve and associated user errors. frads also provides the necessary infrastructure needed for seamless integration of Radiance and other modeling tools, such as EnergyPlus. Intended audience Developers who are interested in incorporating multi-phase matrix methods into their software and are seeking examples and guidance; i.e., LBNL-suggested default parameters and settings; and, Engineering firms, researchers, and students who are comfortable working in the command-line or Python scripting environment and tasked with a project that cannot be completed with existing tools. Why matrix-based methods? Matrix algebraic methods reduce the time needed to perform accurate, ray-tracing based, annual daylight simulations by several orders of magnitude. Why frads? A good deal of expertise is needed to set up the simulations properly to achieve the desired level of accuracy. frads provides users with tools (e.g., mrad ) that automatically determine which matrix-based method to use then sets the associated simulation parameters, helping beginners learn the different matrix methods by observing the tools\u2019 behavior. The user is still required to understand basic concepts underlying matrix-based simulation methods (see tutorials ). Matrix-based methods also enable accurate, ray-tracing generated, irradiance, illuminance, and luminance data to be available for run-time data exchange and co-simulations. frads provides users with tools that generate the appropriate Radiance-generated data then interfaces with the \u201cactuator\u201d EMS module in EnergyPlus or within the Spawn-of-EnergyPlus and Modelica co-simulation environment. This enables end users to evaluate the performance of buildings with manual- and automatically-controlled shading and daylighting systems or other site and building features that can change parametrically or on a time-step basis. Acknowledgements This work was supported by the Assistant Secretary for Energy Efficiency and Renewable Energy, Building Technologies Program, of the U.S. Department of Energy, under Contract No. DE-AC02-05CH11231.","title":"Welcome to frads documentation"},{"location":"#welcome-to-frads-documentation","text":"Date: 2022-10-26 Version: 0.2.8 frads project is an open source, BSD-licensed library providing easy-to-use wrapper for Radiance rendering engine.","title":"Welcome to frads documentation"},{"location":"#table-of-contents","text":"The documentation consists of three parts: Manual : containing manual pages for all the command-line-interfaces. How-To Guides : scenario-based how-to guides Reference : Code API","title":"Table Of Contents"},{"location":"#installation","text":"You can find installation instructions on our README .","title":"Installation"},{"location":"#project-overview","text":"Frads is an open-source library providing high-level abstraction of Radiance matrix-based simulation workflows. Frads automates setup of these simulations by providing end users with an open-source, high-level abstraction of the Radiance command-line workflow (Unix toolbox model), helping to reduce the steep learning curve and associated user errors. frads also provides the necessary infrastructure needed for seamless integration of Radiance and other modeling tools, such as EnergyPlus.","title":"Project Overview"},{"location":"#frads--intended-audience","text":"Developers who are interested in incorporating multi-phase matrix methods into their software and are seeking examples and guidance; i.e., LBNL-suggested default parameters and settings; and, Engineering firms, researchers, and students who are comfortable working in the command-line or Python scripting environment and tasked with a project that cannot be completed with existing tools.","title":"Intended audience"},{"location":"#frads--why-matrix-based-methods","text":"Matrix algebraic methods reduce the time needed to perform accurate, ray-tracing based, annual daylight simulations by several orders of magnitude.","title":"Why matrix-based methods?"},{"location":"#frads--why-frads","text":"A good deal of expertise is needed to set up the simulations properly to achieve the desired level of accuracy. frads provides users with tools (e.g., mrad ) that automatically determine which matrix-based method to use then sets the associated simulation parameters, helping beginners learn the different matrix methods by observing the tools\u2019 behavior. The user is still required to understand basic concepts underlying matrix-based simulation methods (see tutorials ). Matrix-based methods also enable accurate, ray-tracing generated, irradiance, illuminance, and luminance data to be available for run-time data exchange and co-simulations. frads provides users with tools that generate the appropriate Radiance-generated data then interfaces with the \u201cactuator\u201d EMS module in EnergyPlus or within the Spawn-of-EnergyPlus and Modelica co-simulation environment. This enables end users to evaluate the performance of buildings with manual- and automatically-controlled shading and daylighting systems or other site and building features that can change parametrically or on a time-step basis.","title":"Why frads?"},{"location":"#acknowledgements","text":"This work was supported by the Assistant Secretary for Energy Efficiency and Renewable Energy, Building Technologies Program, of the U.S. Department of Energy, under Contract No. DE-AC02-05CH11231.","title":"Acknowledgements"},{"location":"guide6/","text":"How to set up a simple rtrace workflow. Here we go through the process of setting up a simple Radiance model and the workflow of computing irradiance values. Prepare a model If you already have a Radiance model setup, you can skip this step and follow along using your own. If you don't have a model already we can use genradroom to get ourself a simple Radiance model. Let's generate a open-office sized side-lit room with four same-sized windows. The room will be 12 meters wide, 14 meters deep with a ceiling height of 3 meters. Each window is 2.5 meters in width and 1.8 meters in height and has a sill height of 1 meter. Windows are 0.4 meters apart from each other. Finally, we want our facade to have a thickness of 0.1 meters. We'll call this model 'aroom'. The genradroom command is: $ gen room 12 14 3 \\ -w 0.4 1 2.5 1.8 \\ -w 3.3 1 2.5 1.8 \\ -w 6.2 1 2.5 1.8 \\ -w 9.1 1 2.5 1.8 \\ -t 0.1 -n aroom Afterwards, we will have a Objects folder in our current working directory with all of our Radiance model inside. |____Objects | |____window_3_aroom.rad | |____wall_aroom.rad | |____window_2_aroom.rad | |____ceiling_aroom.rad | |____window_1_aroom.rad | |____materials_aroom.mat | |____window_0_aroom.rad | |____floor_aroom.rad We can quickly visualize our model using objview and make sure it's what we'd expect in terms of layout and geometry. objview Objects/*aroom.mat Objects/*aroom.rad And we can see that it is what we'd expect. Generate an octree file Now that we have model, we can start to run some actual simulation. Each code block below can be copy and paste into a something like a Jupyter Lab for an interactive workflow. First lets import all the necessary modules. from frads import matrix from frads import parsers from frads import sky from frads import utils from frads.types import WeaData from frads.types import WeaMetaData Next lets gather our model files. Notice that we have our material files first in the list. fpaths = [ \"Objects/materials_aroom.mat\" , \"Objects/ceiling_aroom.rad\" , \"Objects/wall_aroom.rad\" , \"Objects/floor_aroom.rad\" , \"Objects/window_0_aroom.rad\" , \"Objects/window_1_aroom.rad\" , \"Objects/window_2_aroom.rad\" , \"Objects/window_3_aroom.rad\" , ] Now that we know where all the paths are, we can call oconv to get ourself a octree for ray tracing. We'd like to save our octree as a aroom.oct file. room_octree = \"aroom.oct\" matrix . oconv ( * fpaths , room_octree ) Notices that we have a aroom.oct , which only contains the geometry. We need to define our light source, usually some kind of sky model, for rays to trace to. In this example, we will use Perez all-weather sky model. There are also standard CIE skies as alternatives. To do so, we can use gen_perez_sky function to get our sky description and generate a new octree with it. First to get our sky description, we make up a clear sky on 12-21 12:00 with direct normal irradiance of 800 W/m2 and diffuse horizontal irradiance of 100 W/m2. We also need to define our location in terms of latitude, longitude, time-zone, and elevation. We can then put all these information into the WeaData and WeaMetaData object. month = 12 day = 21 hours = 12 dni = 800 dhi = 100 latitude = 37 longitude = 122 time_zone = 120 elevation = 0 wea_data = WeaData ( month , day , hour , minutes , hours , dni , dhi ) wea_meta = WeaMetaData ( latitude , longitude , time_zone , elevation ) sky_descr = sky . gen_perez_sky ( wea_data , wea_meta ) Once we have our sky description, we can combine it with our aroom.oct octree to make a new octree file. Let's call the octree with our sky specific information, 'aroom_37_122_1221_1200.oct'. room_sky_octree = f'aroom_{latitude}_{longitude}_{month:02d}{day:02d}_{hour:02d}{minute:02d}.oct' matrix.oconv(room_sky_octree, input=sky_descr, octree=room_octree) Get rays We need send rays to the octree file we just created. In Radiance, rays are made of two vectors, one for the starting position and one for the direction the ray is heading. Essentially, we need six values to define our two vectors in cartesian corrdiantes. A ray positioned at x=0, y=0, z=0, pointing upwards is thus: 0 0 0 0 0 1 For this example, we're gonna simulate workplane illuminance. These are essentially virtual sensor positioned at table height pointing upwards, measuring how much light arrives at your table. To get a grid of such sensors, we can use gen_grid utility function, which need a polygon , spacing , and height as arguments. Spacing and height define the grid spacing and the distance from the polygon from which the grid is based-one. Since we are generating a grid of workplane sensors, we can use our floor as the polygon. To get our floor polygon, we can simply load in our floor_aroom.rad file and parse the polygon using the parse_polygon function from the parsers module. The code block demonstrates how we generate a grid of sensors with 1 meter spacing and 0.75 meters away from the floor: floor_primitives = utils . unpack_primitive ( \"Objects/floor_aroom.rad\" ) # Since we only have one primitive in this file, # we'll take the first one to parse. floor_polygon = parsers . parse_polygon ( floor_primitives [ 0 ] . real_arg ) grid = utils . gen_grid ( floor_polygon , 1 , 0.75 ) Let's trace Finally, after all these preparation, we are ready to trace some rays. Let's first trace a single ray, and use the one of the grid sensors we had just created. aray = \" \" . join ( map ( str , grid [ 0 ])) option = \"-I+ -ab 1 -ad 64 -aa 0 -lw 0.01\" result = matrix . rtrace ( aray , option , room_sky_octree ) if we print the result , we will see the following: >>> print(result) #?RADIANCE ... 3.23E+01 1.23E+02 7.80E+01 Below the header, we can see three values, corresponding to red, green, and blue channel from our simulation. We can weight these RGB to derive our illuminance values. First we need get rid of the header. We can do that by passing header=False when we call rtrace. Or like so: result = result . split ( \" \\n\\n \" , 1 )[ 1 :] illuminance = matrix . weighting ( result , ( 47.3 , 119.9 , 11.6 )) If we print out illuminance , we have: >>> print(illuminance) 2343.1 Next, let's trace all of our grid sensors. Since our grid of sensors are a list of lists of floats, we need to process them a little bit before rtrace can take them. rays = \"\\n\".join([\" \".join(map(str, row)) for row in grid]) results = matrix.rtrace(rays, option, room_sky_octree, header=False) And our results, now with the header, is the following: After weighting these RGB values to obtain illuminance values, it'd be nice if we can visualize it somehow. One of the most common approach to visualize illuminance values over a grid of sensors is to map these values to a color scale. There are many ways to achieve. Here we're gonna stay in the Python world and use the popular matplotlib library to visualize our results. favorite","title":"How to set up a simple rtrace workflow."},{"location":"guide6/#how-to-set-up-a-simple-rtrace-workflow","text":"Here we go through the process of setting up a simple Radiance model and the workflow of computing irradiance values.","title":"How to set up a simple rtrace workflow."},{"location":"guide6/#prepare-a-model","text":"If you already have a Radiance model setup, you can skip this step and follow along using your own. If you don't have a model already we can use genradroom to get ourself a simple Radiance model. Let's generate a open-office sized side-lit room with four same-sized windows. The room will be 12 meters wide, 14 meters deep with a ceiling height of 3 meters. Each window is 2.5 meters in width and 1.8 meters in height and has a sill height of 1 meter. Windows are 0.4 meters apart from each other. Finally, we want our facade to have a thickness of 0.1 meters. We'll call this model 'aroom'. The genradroom command is: $ gen room 12 14 3 \\ -w 0.4 1 2.5 1.8 \\ -w 3.3 1 2.5 1.8 \\ -w 6.2 1 2.5 1.8 \\ -w 9.1 1 2.5 1.8 \\ -t 0.1 -n aroom Afterwards, we will have a Objects folder in our current working directory with all of our Radiance model inside. |____Objects | |____window_3_aroom.rad | |____wall_aroom.rad | |____window_2_aroom.rad | |____ceiling_aroom.rad | |____window_1_aroom.rad | |____materials_aroom.mat | |____window_0_aroom.rad | |____floor_aroom.rad We can quickly visualize our model using objview and make sure it's what we'd expect in terms of layout and geometry. objview Objects/*aroom.mat Objects/*aroom.rad And we can see that it is what we'd expect.","title":"Prepare a model"},{"location":"guide6/#generate-an-octree-file","text":"Now that we have model, we can start to run some actual simulation. Each code block below can be copy and paste into a something like a Jupyter Lab for an interactive workflow. First lets import all the necessary modules. from frads import matrix from frads import parsers from frads import sky from frads import utils from frads.types import WeaData from frads.types import WeaMetaData Next lets gather our model files. Notice that we have our material files first in the list. fpaths = [ \"Objects/materials_aroom.mat\" , \"Objects/ceiling_aroom.rad\" , \"Objects/wall_aroom.rad\" , \"Objects/floor_aroom.rad\" , \"Objects/window_0_aroom.rad\" , \"Objects/window_1_aroom.rad\" , \"Objects/window_2_aroom.rad\" , \"Objects/window_3_aroom.rad\" , ] Now that we know where all the paths are, we can call oconv to get ourself a octree for ray tracing. We'd like to save our octree as a aroom.oct file. room_octree = \"aroom.oct\" matrix . oconv ( * fpaths , room_octree ) Notices that we have a aroom.oct , which only contains the geometry. We need to define our light source, usually some kind of sky model, for rays to trace to. In this example, we will use Perez all-weather sky model. There are also standard CIE skies as alternatives. To do so, we can use gen_perez_sky function to get our sky description and generate a new octree with it. First to get our sky description, we make up a clear sky on 12-21 12:00 with direct normal irradiance of 800 W/m2 and diffuse horizontal irradiance of 100 W/m2. We also need to define our location in terms of latitude, longitude, time-zone, and elevation. We can then put all these information into the WeaData and WeaMetaData object. month = 12 day = 21 hours = 12 dni = 800 dhi = 100 latitude = 37 longitude = 122 time_zone = 120 elevation = 0 wea_data = WeaData ( month , day , hour , minutes , hours , dni , dhi ) wea_meta = WeaMetaData ( latitude , longitude , time_zone , elevation ) sky_descr = sky . gen_perez_sky ( wea_data , wea_meta ) Once we have our sky description, we can combine it with our aroom.oct octree to make a new octree file. Let's call the octree with our sky specific information, 'aroom_37_122_1221_1200.oct'. room_sky_octree = f'aroom_{latitude}_{longitude}_{month:02d}{day:02d}_{hour:02d}{minute:02d}.oct' matrix.oconv(room_sky_octree, input=sky_descr, octree=room_octree)","title":"Generate an octree file"},{"location":"guide6/#get-rays","text":"We need send rays to the octree file we just created. In Radiance, rays are made of two vectors, one for the starting position and one for the direction the ray is heading. Essentially, we need six values to define our two vectors in cartesian corrdiantes. A ray positioned at x=0, y=0, z=0, pointing upwards is thus: 0 0 0 0 0 1 For this example, we're gonna simulate workplane illuminance. These are essentially virtual sensor positioned at table height pointing upwards, measuring how much light arrives at your table. To get a grid of such sensors, we can use gen_grid utility function, which need a polygon , spacing , and height as arguments. Spacing and height define the grid spacing and the distance from the polygon from which the grid is based-one. Since we are generating a grid of workplane sensors, we can use our floor as the polygon. To get our floor polygon, we can simply load in our floor_aroom.rad file and parse the polygon using the parse_polygon function from the parsers module. The code block demonstrates how we generate a grid of sensors with 1 meter spacing and 0.75 meters away from the floor: floor_primitives = utils . unpack_primitive ( \"Objects/floor_aroom.rad\" ) # Since we only have one primitive in this file, # we'll take the first one to parse. floor_polygon = parsers . parse_polygon ( floor_primitives [ 0 ] . real_arg ) grid = utils . gen_grid ( floor_polygon , 1 , 0.75 )","title":"Get rays"},{"location":"guide6/#lets-trace","text":"Finally, after all these preparation, we are ready to trace some rays. Let's first trace a single ray, and use the one of the grid sensors we had just created. aray = \" \" . join ( map ( str , grid [ 0 ])) option = \"-I+ -ab 1 -ad 64 -aa 0 -lw 0.01\" result = matrix . rtrace ( aray , option , room_sky_octree ) if we print the result , we will see the following: >>> print(result) #?RADIANCE ... 3.23E+01 1.23E+02 7.80E+01 Below the header, we can see three values, corresponding to red, green, and blue channel from our simulation. We can weight these RGB to derive our illuminance values. First we need get rid of the header. We can do that by passing header=False when we call rtrace. Or like so: result = result . split ( \" \\n\\n \" , 1 )[ 1 :] illuminance = matrix . weighting ( result , ( 47.3 , 119.9 , 11.6 )) If we print out illuminance , we have: >>> print(illuminance) 2343.1 Next, let's trace all of our grid sensors. Since our grid of sensors are a list of lists of floats, we need to process them a little bit before rtrace can take them. rays = \"\\n\".join([\" \".join(map(str, row)) for row in grid]) results = matrix.rtrace(rays, option, room_sky_octree, header=False) And our results, now with the header, is the following: After weighting these RGB values to obtain illuminance values, it'd be nice if we can visualize it somehow. One of the most common approach to visualize illuminance values over a grid of sensors is to map these values to a color scale. There are many ways to achieve. Here we're gonna stay in the Python world and use the popular matplotlib library to visualize our results. favorite","title":"Let's trace"},{"location":"how-to-guides/","text":"This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project. How to simulate spatial daylight autonomy using two-phase method? How to simulate spatial daylight autonomy using three-phase method? How to simulate annual glare index using five-phase method? How to simulate annual melanopic equivalent daylight illuminance? How to setup a progressive simulation workflow? How to setup a simple rtrace workflow?","title":"How-To Guides"},{"location":"install_guide/","text":"Quick install guide Before you can use frads, you need to install it. Install Python Being a Python based library, you'll need to install Python first. Python version 3.8 or newer is required for frads. Get the latest version of Python at https://www.python.org/downloads/ or with your operating system\u2019s package manager. You can verify that Python is installed by typing python from your cmd/powershell/terminal; you should see something like: $ python Python 3.X.X [GCC 4.x] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> Install Radiance If you haven't already, you will need to install Radiance. frads will check your Radiance installation, so make sure you install it first. To install Radiance, visit Radiance Github repo to download the latest release for your operating system. You can verify that Radiance is installed properly by typing in the command-line: $ rtrace -version RADIANCE 5.4a ... Install frads After you have Python installed, you should have pip command available in your shell environment as well. You can then use pip to install frads : $ python -m pip install frads Alternatively, more recent version of frads can be installed directly from github as well. Watch for the passing/failed tag on github to check if the current version passed the tests.: $ python -m pip install git+https://github.com/LBNL-ETA/frads Verifying To verify that frads can be seen by Python, type python from your shell. Then at the Python prompt, try to import frads >>> import frads >>> print(frads.__version__) 0.2.7 Optional external library Frads uses Python standard library for all of its functionalities. However, it will take advantage of Numpy if you have it installed. It will greatly accelerate the matrix multiplication process, especially for progressive simulation workflow. The gencolorsky command line tool in frads also relies on libRadTran a radiative transfer library for computing the spectrally-resolved radiation data. You'd need to install it first to use gencolorsky .","title":"Quick install guide"},{"location":"install_guide/#quick-install-guide","text":"Before you can use frads, you need to install it.","title":"Quick install guide"},{"location":"install_guide/#install-python","text":"Being a Python based library, you'll need to install Python first. Python version 3.8 or newer is required for frads. Get the latest version of Python at https://www.python.org/downloads/ or with your operating system\u2019s package manager. You can verify that Python is installed by typing python from your cmd/powershell/terminal; you should see something like: $ python Python 3.X.X [GCC 4.x] on linux Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>>","title":"Install Python"},{"location":"install_guide/#install-radiance","text":"If you haven't already, you will need to install Radiance. frads will check your Radiance installation, so make sure you install it first. To install Radiance, visit Radiance Github repo to download the latest release for your operating system. You can verify that Radiance is installed properly by typing in the command-line: $ rtrace -version RADIANCE 5.4a ...","title":"Install Radiance"},{"location":"install_guide/#install-frads","text":"After you have Python installed, you should have pip command available in your shell environment as well. You can then use pip to install frads : $ python -m pip install frads Alternatively, more recent version of frads can be installed directly from github as well. Watch for the passing/failed tag on github to check if the current version passed the tests.: $ python -m pip install git+https://github.com/LBNL-ETA/frads","title":"Install frads"},{"location":"install_guide/#verifying","text":"To verify that frads can be seen by Python, type python from your shell. Then at the Python prompt, try to import frads >>> import frads >>> print(frads.__version__) 0.2.7","title":"Verifying"},{"location":"install_guide/#optional-external-library","text":"Frads uses Python standard library for all of its functionalities. However, it will take advantage of Numpy if you have it installed. It will greatly accelerate the matrix multiplication process, especially for progressive simulation workflow. The gencolorsky command line tool in frads also relies on libRadTran a radiative transfer library for computing the spectrally-resolved radiation data. You'd need to install it first to use gencolorsky .","title":"Optional external library"},{"location":"other_cli/","text":"Other Command-line tools gencolorsky Gencolorsky uses libRadtran to compute spatially- and spectrally-resolved sky radiation data based on an Earth\u2019s spherical atmosphere radiative transfer model that includes Rayleigh scattering by air molecules, molecular absorption, aerosol, water, and ice clouds. One of the main command-line programs in libRadtran, uvspec, is invoked to compute the sky radiance at every r\u00b0 (default 3\u00b0) in both the azimuth and altitude directions. Within uvspec, the DISORT radiative transfer solver is used. Extraterrestrial solar source data (280-800 nm), at 1nm interval, are used to generate spectrally-resolved sky radiation data at each sample point, which by default is computed at a 10 nm interval from 360 nm to 800 nm. By default, this sky spectral data is converted to Radiance RGB using CIE XYZ tristimulus with either the 2\u00b0 or 10\u00b0 standard observer, using user defined color space (default: Radiance RGB). If -i setting is used, the resulting three channels become photopic (CIE-Y), melanopic equivalent daylight il/luminance (EDI), and solar ir/radiance, respectively. The output is a folder called cs_{datetime} {lat} in the current working directory, containing a sky.rad file along with associated color data. Usage To generate a sky vector (for e.g., annual calculations), genskyvec can be used on the resulting sky.rad:: $ genskyvec < sky.rad > sky.vec The options to gencolorsky are can be found using -h flag on the command line: $ gencolorsky -h Options -a/--latitude : Location latitude; positive is northern hemisphere (required) -o/--longitude : Location longitude; positive is western (required) -m/--tzone : Location standard meridian (required) -u/--altitude : Location altitude in km, default = 0 -i/--pmt : Compute for photopic, melanopic, and solar for each of the three channels, instead of RGB. -r/--anglestep : Angular resolution at which the sky is sampled, default = 3\u00b0 -s/--observer : Standard observer, 2\u00b0 or 10\u00b0 -c/--colorspace : Colorspace from which the sky is derived, choices are {radiance, sharp, adobe, rimm, 709, p3, 2020}, default=Radiance -e/--atm : Atmospheric composition file. Default to use AFGL data that came with libRadtran, automatically chosen depending on location and time of year. -l/--aerosol : Standard aerosol profile. This option overwrites the aerosol optical depth setting,defined below. The profile choices are: Continental_clean Continental_average Continental_polluted Urban Maritime_clean Maritime_polluted Maritime_tropical Desert Antarctic -b/--cloudcover : Cloud cover, [0, 1], 1 is complete cover. Cloud cover data can be sourced from TMY data. -d/--aod : Aerosol optical depth, which can be sourced from TMY data. -g/--cloudprofile : Cloud profile file path. Space separated file, three columns: height (km), liquid water content (LWC) (g/m3), effective radius (R_eff) (um). Default: water clouds exist from 2-5 km in altitude with a LWC of 2.5 g/m3 and R_eff of 100 um -t/--total : Compute GHI, DNI, and DHI, instead of full sky description. Handy for quick comparison against measurements. -v/--verbose : Verbosity -v=Debug, -vv=Info, -vvv=Warning, -vvvv=Error, -vvvvv=Critical, default=Warning Examples Compute direct normal, diffuse horizontal, and global horizontal irradiance in solar spectrum for 2022-06-21 10:00 in Berkeley CA USA, with clear sky and continental_average aerosol profile: $ gencolorsky 2022 6 21 10 0 -a 37.7 -o 122.2 -m 120 -l continental_average -t DNI: 864.40 W/m2; DHI: 124.47 W/m2; GHI: 862.96 W/m2 Compute RGB sky for 2022-12-21 16:30 in Berkeley, CA, USA, with .2 cloud cover and .3 aerosol optical depth: $ gencolorsky 2022 12 21 16 30 -a 37.7 -o 122.2 -m 120 -b .2 -d .3 Compute photopic, melanopic, and solar for each of the three-channel for the same sky: $ gencolorsky 2022 12 21 16 30 -a 37.7 -o 122.2 -m 120 -b .2 -d .3 -i genradroom genradroom generates a side-lit room model with a rectangular footprint. Usage genradroom width depth height [-w [Windows ... ]] [-t facade_thickness] [-n model name] Options width : Room width (along x-axis) depth : Room depth (along y-axis) height : Room height (along z-axis) -w : Window[s], starting x, z, width, height. -n : Model name -t : Facade thickness. -r/--rotate : Example $ genradroom -h gengrid gengrid can be used to generate a sensor grid given a surface, spacing, and height. Help and instruction can be found using the -h flag:: Usage gengrid surface spacing height [-op] Options surface Surface from which the grid will be constructed. Usually a .rad file. The first polygon primitive from the file will be used as the surface polygon. spacing Grid spacing, in model's unit. height Grid distance from the surface. -op : Use the opposite side of the polygon. Example $ gengrid floo.rad 3 2 dctsnp Usage Options Example dctsnp can be used to do matrix multiplication similar to what the Radiance dctimestep program does. Matrix multiplications are performed using Python numpy packages (i.e., numpy is required for this tool), which are based on BLAS linear algebra packages. Help and instruction can be found using the -h flag:: $ dctsnp -h .. program-output:: dctsnp -h glazing glazeing produces the same output as the original .csh glaze interactive script that comes with the Radiance distro. This command-line program is not interactive; glass coating and coating-side of the glass layer are determined by input Optics files or IGSDB json data. Help and instruction can be found using the -h flag:: Usage Options -x/--optics : Optics file path[s]. -d/--igsdb : IGSDB JSON file path[s]. -c/--cspace : Colorspace. -s/--observer : CIE observer 2\u00b0 or 10\u00b0. Example $ glazing -h ep2rad Usage Options Example ep2rad","title":"Other Command-line tools"},{"location":"other_cli/#other-command-line-tools","text":"","title":"Other Command-line tools"},{"location":"other_cli/#gencolorsky","text":"Gencolorsky uses libRadtran to compute spatially- and spectrally-resolved sky radiation data based on an Earth\u2019s spherical atmosphere radiative transfer model that includes Rayleigh scattering by air molecules, molecular absorption, aerosol, water, and ice clouds. One of the main command-line programs in libRadtran, uvspec, is invoked to compute the sky radiance at every r\u00b0 (default 3\u00b0) in both the azimuth and altitude directions. Within uvspec, the DISORT radiative transfer solver is used. Extraterrestrial solar source data (280-800 nm), at 1nm interval, are used to generate spectrally-resolved sky radiation data at each sample point, which by default is computed at a 10 nm interval from 360 nm to 800 nm. By default, this sky spectral data is converted to Radiance RGB using CIE XYZ tristimulus with either the 2\u00b0 or 10\u00b0 standard observer, using user defined color space (default: Radiance RGB). If -i setting is used, the resulting three channels become photopic (CIE-Y), melanopic equivalent daylight il/luminance (EDI), and solar ir/radiance, respectively. The output is a folder called cs_{datetime} {lat} in the current working directory, containing a sky.rad file along with associated color data.","title":"gencolorsky"},{"location":"other_cli/#usage","text":"To generate a sky vector (for e.g., annual calculations), genskyvec can be used on the resulting sky.rad:: $ genskyvec < sky.rad > sky.vec The options to gencolorsky are can be found using -h flag on the command line: $ gencolorsky -h","title":"Usage"},{"location":"other_cli/#options","text":"-a/--latitude : Location latitude; positive is northern hemisphere (required) -o/--longitude : Location longitude; positive is western (required) -m/--tzone : Location standard meridian (required) -u/--altitude : Location altitude in km, default = 0 -i/--pmt : Compute for photopic, melanopic, and solar for each of the three channels, instead of RGB. -r/--anglestep : Angular resolution at which the sky is sampled, default = 3\u00b0 -s/--observer : Standard observer, 2\u00b0 or 10\u00b0 -c/--colorspace : Colorspace from which the sky is derived, choices are {radiance, sharp, adobe, rimm, 709, p3, 2020}, default=Radiance -e/--atm : Atmospheric composition file. Default to use AFGL data that came with libRadtran, automatically chosen depending on location and time of year. -l/--aerosol : Standard aerosol profile. This option overwrites the aerosol optical depth setting,defined below. The profile choices are: Continental_clean Continental_average Continental_polluted Urban Maritime_clean Maritime_polluted Maritime_tropical Desert Antarctic -b/--cloudcover : Cloud cover, [0, 1], 1 is complete cover. Cloud cover data can be sourced from TMY data. -d/--aod : Aerosol optical depth, which can be sourced from TMY data. -g/--cloudprofile : Cloud profile file path. Space separated file, three columns: height (km), liquid water content (LWC) (g/m3), effective radius (R_eff) (um). Default: water clouds exist from 2-5 km in altitude with a LWC of 2.5 g/m3 and R_eff of 100 um -t/--total : Compute GHI, DNI, and DHI, instead of full sky description. Handy for quick comparison against measurements. -v/--verbose : Verbosity -v=Debug, -vv=Info, -vvv=Warning, -vvvv=Error, -vvvvv=Critical, default=Warning","title":"Options"},{"location":"other_cli/#examples","text":"Compute direct normal, diffuse horizontal, and global horizontal irradiance in solar spectrum for 2022-06-21 10:00 in Berkeley CA USA, with clear sky and continental_average aerosol profile: $ gencolorsky 2022 6 21 10 0 -a 37.7 -o 122.2 -m 120 -l continental_average -t DNI: 864.40 W/m2; DHI: 124.47 W/m2; GHI: 862.96 W/m2 Compute RGB sky for 2022-12-21 16:30 in Berkeley, CA, USA, with .2 cloud cover and .3 aerosol optical depth: $ gencolorsky 2022 12 21 16 30 -a 37.7 -o 122.2 -m 120 -b .2 -d .3 Compute photopic, melanopic, and solar for each of the three-channel for the same sky: $ gencolorsky 2022 12 21 16 30 -a 37.7 -o 122.2 -m 120 -b .2 -d .3 -i","title":"Examples"},{"location":"other_cli/#genradroom","text":"genradroom generates a side-lit room model with a rectangular footprint.","title":"genradroom"},{"location":"other_cli/#usage_1","text":"genradroom width depth height [-w [Windows ... ]] [-t facade_thickness] [-n model name]","title":"Usage"},{"location":"other_cli/#options_1","text":"width : Room width (along x-axis) depth : Room depth (along y-axis) height : Room height (along z-axis) -w : Window[s], starting x, z, width, height. -n : Model name -t : Facade thickness. -r/--rotate :","title":"Options"},{"location":"other_cli/#example","text":"$ genradroom -h","title":"Example"},{"location":"other_cli/#gengrid","text":"gengrid can be used to generate a sensor grid given a surface, spacing, and height. Help and instruction can be found using the -h flag::","title":"gengrid"},{"location":"other_cli/#usage_2","text":"gengrid surface spacing height [-op]","title":"Usage"},{"location":"other_cli/#options_2","text":"surface Surface from which the grid will be constructed. Usually a .rad file. The first polygon primitive from the file will be used as the surface polygon. spacing Grid spacing, in model's unit. height Grid distance from the surface. -op : Use the opposite side of the polygon.","title":"Options"},{"location":"other_cli/#example_1","text":"$ gengrid floo.rad 3 2","title":"Example"},{"location":"other_cli/#dctsnp","text":"","title":"dctsnp"},{"location":"other_cli/#usage_3","text":"","title":"Usage"},{"location":"other_cli/#options_3","text":"","title":"Options"},{"location":"other_cli/#example_2","text":"dctsnp can be used to do matrix multiplication similar to what the Radiance dctimestep program does. Matrix multiplications are performed using Python numpy packages (i.e., numpy is required for this tool), which are based on BLAS linear algebra packages. Help and instruction can be found using the -h flag:: $ dctsnp -h .. program-output:: dctsnp -h","title":"Example"},{"location":"other_cli/#glazing","text":"glazeing produces the same output as the original .csh glaze interactive script that comes with the Radiance distro. This command-line program is not interactive; glass coating and coating-side of the glass layer are determined by input Optics files or IGSDB json data. Help and instruction can be found using the -h flag::","title":"glazing"},{"location":"other_cli/#usage_4","text":"","title":"Usage"},{"location":"other_cli/#options_4","text":"-x/--optics : Optics file path[s]. -d/--igsdb : IGSDB JSON file path[s]. -c/--cspace : Colorspace. -s/--observer : CIE observer 2\u00b0 or 10\u00b0.","title":"Options"},{"location":"other_cli/#example_3","text":"$ glazing -h","title":"Example"},{"location":"other_cli/#ep2rad","text":"","title":"ep2rad"},{"location":"other_cli/#usage_5","text":"","title":"Usage"},{"location":"other_cli/#options_5","text":"","title":"Options"},{"location":"other_cli/#example_4","text":"ep2rad","title":"Example"},{"location":"reference/","text":"Reference This reference guide contains a detailed description of the frads API. It describes how the functions and methods work and which parameter can be used. It assumes that you have an understanding of the key concepts. Color Parsers Sky Data types and containers Geometry Utility Matrix frads.color This module contains all color and spectral-related functionalities. get_conversion_matrix ( prims , reverse = False ) Get CIE conversion matrix based on color primaries. Parameters: Name Type Description Default prims ColorPrimaries Color space color primaries required reverse bool get RGB to XYZ conversion matrix instead False Returns: Type Description tuple The conversion matrix coefficients in a 1-dimensional tuple. get_interpolated_cie_xyz ( inp_wvl , observer ) Load CIE tristimulus data according to input wavelength. Also load melanopic action spectra data as well. Parameters: Name Type Description Default inp_wvl Sequence [ Union [ float , int ]] a list of input wavelength in nm required observer str 2\u00b0 or 10\u00b0 observer for the colar matching function. required Returns: Type Description List [ tuple ] CIE-x List [ tuple ] CIE-y List [ tuple ] CIE-z List [ tuple ] Melanopic action spectra List [ tuple ] Index of input wavelength corresponding to available tristimulus data get_interpolated_mlnp ( inp_wvl ) Load CIE tristimulus data according to input wavelength. Also load melanopic action spectra data as well. Parameters: Name Type Description Default inp_wvl Sequence [ Union [ float , int ]] a list of input wavelength in nm required Returns: Type Description List [ float ] Melanopic action spectra rgb2xyz ( red , green , blue , coeffs ) Convert RGB to CIE XYZ. Parameters: Name Type Description Default red float red required green float green required blue float blue required coeffs tuple coversion matrix. required Returns: Type Description Tuple [ float , float , float ] CIE X, Y, Z. Raise ValueError with invalid coeffs. spec2xyz ( cie_xyz_bar , spec , wvl_range , emis = False ) Convert spectral data to CIE XYZ. Parameters: Name Type Description Default cie_xyz_bar CIE color matching function. required spec list input spectral data as a dictionary sorted by wavelenth as key. required emis bool flag whether the input data is emissive in nature. False Returns: Type Description tuple CIE X, Y, Z Note Assuming input wavelength is a subset of the CIE ones xyz2rgb ( cie_x , cie_y , cie_z , coeffs ) Convert CIE XYZ to RGB. Parameters: Name Type Description Default cie_x float cie_x required cie_y float cie_y required cie_z float cie_z required coeffs tuple conversion matrix required Returns: Type Description Tuple [ float , float , float ] Red, Green, Blue Raise ValueError for invalid coeffs. xyz2xy ( cie_x , cie_y , cie_z ) Convert CIE XYZ to xy chromaticity. Parameters: Name Type Description Default cie_x float CIE X required cie_y float CIE Y required cie_z float CIE Z required Returns: Type Description float x chromoticity float y chromoticity frads.parsers This module contains all data parsing routines. TensorTree The tensor tree object. Anisotropic tensor tree has should have 16 lists Attributes: Name Type Description parsed parsed tensor tree object) depth number of tree levels get_branch_index ( xp , yp ) Gets a set of index. lookup ( xp , yp ) Traverses a parsed tensor tree (a nexted list) given a input position. traverse ( quad , xp , yp , n = 1 ) Traverse a quadrant. get_nested_list_levels ( nested_list ) Calculate the number of levels given a nested list. get_rcontrib_options_args ( parser ) Add rcontrib specific options to a parser. get_rtrace_options_args ( parser ) Add rtrace options and flags to a parser. parse_branch ( token ) Prase tensor tree branches recursively by opening and closing curly braces. Parameters: Name Type Description Default token Generator [ str , None, None] token generator object. required Return children: parsed branches as nexted list parse_epw ( epw_str ) Parse epw file and return wea header and data. parse_idf ( content ) Parse an IDF file into a dictionary. parse_igsdb_json ( json_obj ) Parse a JSON file from IGSDB. parse_mrad_config ( cfg_path ) Parse mrad configuration file. parse_opt ( opt_str ) Parsing option string into a dictionary. Parameters: Name Type Description Default opt_str str rtrace option parameters as a string required Returns: Type Description dict An option dictionary parse_optics ( fpath ) Read and parse an optics file. parse_polygon ( real_args ) Parse real arguments to polygon. Parameters: Name Type Description Default primitive a dictionary object containing a primitive required Returns: Type Description geom . Polygon modified primitive parse_primitive ( lines ) Parse Radiance primitives inside a file path into a list of dictionary. Parameters: Name Type Description Default lines list list of lines as strings required Returns: Type Description List [ Primitive ] list of primitives as dictionaries Notes Dropping support for alias type parse_rad_header ( header_str ) Parse a Radiance matrix file header. Parameters: Name Type Description Default header_str(str) header as string required Returns: Type Description tuple A tuple contain nrow, ncol, ncomp, datatype parse_ttree ( data_str ) Parse a tensor tree. Parameters: Name Type Description Default data_str str input data string required Returns: Type Description list A nested list that is the tree parse_vu ( vu_str ) Parse view string into a View object. Parameters: Name Type Description Default vu_str str view parameters as a string required Returns: Type Description View A view object parse_wea ( wea_str ) Parse a wea file in its entirety. tokenize ( inp ) Generator for tokenizing a string that is seperated by a space or a comma. Parameters: Name Type Description Default inp str input string required Yields: Type Description Generator [ str , None, None] next token frads.sky Routines for generating sky models basis_glow ( sky_basis ) Generate a set of regular sky and ground glow primitives string. Parameters: Name Type Description Default sky_basis(str) sky sampling basis, e.g. r1, r4 required Returns: Type Description str ground and sky glow string, usually used for rfluxmtx calls. check_sun_above_horizon ( data , metadata ) Remove non-daylight hour entries. filter_data_by_direct_sun ( data , meta , window_normal = None ) Remove wea data entries with zero solar luminance according to Perez All-Weather sky model. If window normal supplied, eliminate entries not seen by window. Window field of view is 176 deg with 2 deg tolerance on each side. Parameters: Name Type Description Default data Sequence [ WeaData ] Sequence[WeaData], required meta WeaMetaData WeaMetaData, required window_normal Optional [ Sequence [ geom . Vector ]] Optional[Sequence[geom.Vector]] = None, None Returns: Name Type Description data List [ WeaData ] filter_data_with_zero_dni ( data ) Filter out data entries with zero direct normal irradiance. filter_wea ( wea_data , meta_data , start_hour = None , end_hour = None , daylight_hours_only = False , remove_zero = False , window_normals = None ) Obtain and prepare weather file data. Parameters: Name Type Description Default wea_data(List[WeaData]) A list of WeaData. required meta_data(WeaMetaData) A instance of WeaMetaData object. required start_hour(float, optional Filter out wea data before this hour. required end_hour(float, optional Filter out wea data after this hour. required daylight_hours_only(bool, optional Filter out wea data below horizon. required remove_zero(bool, optional Filter out wea data with zero DNI. required window_normals(List[geom.Vector], optional Filter out wea data with direct sun not seen by these window normals. required Returns: Name Type Description wea_data List [ WeaData ] Filterd list of wea data datetime_stamps list Remaining datetime stamps gen_sun_source_culled ( mf , smx_path = None , window_normals = None ) Generate a culled set of sun sources based on either window orientation and/or climate-based sky matrix. The reduced set of sun sources will significantly speed up the direct-sun matrix generation. Parameters: Name Type Description Default mf(int) multiplication factor, usually 1, 2, or 4. required smx_path(str) Optional, sky matrix path, usually the output of gendaymtx required window_normals(str) Optional, window normals required Returns: Type Description str A tuple of culled set of sun light and source primitive string, str corresponding modifier strings, and the full set of modifier string. gen_sun_source_full ( mf ) Generate a full set of sun light sources according to Reinhart basis. Parameters: Name Type Description Default mf(int) multiplication factor, usually 1, 2, or 4. required Returns: Type Description str A tuple of full set of sun light and source primitive string str and associated modifier string. gendaylit_cmd ( month , day , hours , lat , lon , tzone , year = None , dir_norm_ir = None , dif_hor_ir = None , dir_hor_ir = None , dir_norm_il = None , dif_hor_il = None , solar = False ) Get a gendaylit command as a list. gendaymtx ( out , mf , data = None , meta = None , wpath = None , direct = False , solar = False , onesun = False , rotate = None , binary = False ) Call gendaymtx to generate a sky/sun matrix and write results to out. It takes either a .wea file path or wea data and metadata (defined in frads.types). If both are provided, .wea file path will be used. Parameters: Name Type Description Default out(str or pathlib.Path outpath file path required mf(int) multiplication factor required data(Sequence[WeaData], optional A sequence of WeaData. required meta(WeaMetaData, optional A instance of WeaMetaData object. required wpath(Path, optional .wea file path. required direct(bool, optional Whether to generate sun-only sky matrix. required solar(bool, optional Whether to generate sky matrix if solar spectrum. required onesun(bool, optional Whether to generate single sun matrix (five-phase). required rotate(float, optional rotate the sky counter-clock wise, looking down. required binary(bool, optional Whether to have outputs in single precision floats. required Returns: Name Type Description cmd List [ str ] the gendaymtx command called. Raises: Type Description ValueError An error occurs if neither a .wea path nor wea data is provided. grndglow ( basis = 'u' ) Generate a set of ground string Parameters: Name Type Description Default basis(str) Optional default=u required Returns: Type Description str A set of ground glow primitive string skyglow ( basis , upvect = '+Y' ) Generate a set of skyglow string Parameters: Name Type Description Default basis(str) e.g., r1, r2, r4 required upvect(str) Optional, default=+Y required Returns: Type Description str A set of sky glow primitive string solar_angle ( lat , lon , mer , month , day , hour ) Simplified translation from the Radiance sun.c and gensky.c code. start_end_hour ( data , sh , eh ) Remove wea data entries outside of the start and end hour. frads.types This module contains all data types used across frads. The exceptions are the Vector and Polygon class in the geom.py module. Primitive Bases: NamedTuple Radiance Primitive. Attributes one-to-one mapped from Radiance. Attributes: Name Type Description modifier str modifier, which primitive modifies this one ptype str primitive type identifier str identifier, name of this primitive str_arg Sequence [ str ] string argument real_arg Sequence [ Union [ int , float ]] real argument int_arg str integer argument, not used in Radiance (default=\"0\") Sender dataclass Sender object for matrix generation. Attributes: Name Type Description form str types of sender, {surface(s)|view(v)|points(p)} sender bytes the sender string xres Optional [ int ] sender x dimension yres Optional [ int ] sender y dimension Receiver dataclass Receiver object for matrix generation. Attributes: Name Type Description receiver str receiver string which can be appended to one another basis str receiver basis, usually kf, r4, r6; modifier str modifiers to the receiver objects; PaneProperty Bases: NamedTuple Window pane property object. Attributes: Name Type Description name str material name. thickness float pane thickness. gtype str material type. coated_side str coated side, front or back. wavelength List [ float ] Wavelength data. transmittance List [ float ] Transmittance data. reflectance_front List [ float ] Reflectance front data. reflectance_back List [ float ] Reflectance back data. WeaMetaData Bases: NamedTuple Weather related meta data object. Attributes: Name Type Description city str City. country str Country. latitude float Latitude. longitude float Longitude. timezone int Timezone as standard meridian. elevation float Site elevation (m). wea_header () Return a .wea format header. WeaData Bases: NamedTuple Weather related data object. Attributes: Name Type Description month Month. day Day. hour Hour. minute Minutes. second Seconds. hours Times with minutes as fraction. dni float Direct normal irradiance (W/m2). dhi float Diffuse horizontal irradiance (W/m2). aod float Aeroal Optical Depth (default = 0). cc float Cloud cover (default = 0). year float default = 2000. MradModel Bases: NamedTuple Mrad model object. Attributes: Name Type Description name str Model name material_path Path Material path window_groups Dict [ str , List [ Primitive ]] Window primitives grouped by files window_normals List [ Vector ] Window normals sender_grid dict Grid ray samples mapped to grid surface name. sender_view dict View ray samples mapped to view name. views dict Mapping from View name to view properties. receiver_sky dict Sky as the receiver object. bsdf_xml dict Mapping from window groupd name to BSDF file path. cfs_paths list The list of files used for direct-sun coefficient calculations. ncp_shades dict The list of non-coplanar shading files. black_env_path Path Blackened environment file path. MradPath dataclass This dataclass object holds all the paths during a mrad run. All attributes are initiated with default_factory set to the attribute's type, which means this object can be instantiated without any arguments and add define its attributes later. Attributes: Name Type Description pvmx Dict [ str , Path ] Point view matrix paths mapped to grid name. pvmxd Dict [ str , Path ] Direct only point view matrix paths mapped to grid name. pdsmx Dict [ str , Path ] Point daylight coefficient matrix file paths mapped to grid name. pcdsmx Dict [ str , Path ] Point direct-sun coefficient matrix file paths mapped to grid name. vvmx Dict [ str , Path ] View view matrix paths mapped to view name. vvmxd Dict [ str , Path ] Direct only view view matrix paths mapped to view name. vdsmx Dict [ str , Path ] View daylight coefficient matrix file paths mapped to grid name. vcdsmx Dict [ str , Path ] View direct-sun coefficient matrix file paths mapped to view name. vcdfmx Dict [ str , Path ] View direct-sun coefficient(f) matrix file paths mapped to view name. vcdrmx Dict [ str , Path ] View direct-sun coefficient(r) matrix file paths mapped to view name. vmap Dict [ str , Path ] View matrix material map mapped to view name. cdmap Dict [ str , Path ] Direct-sun matrix material map mapped to view name. dmx Dict [ str , Path ] Daylight matrix file paths mapped to window name. dmxd Dict [ str , Path ] Direct daylight matrix mapped to window name. smxd Path Sun-only (3-4 sun patches) sky matrix file path. smx Path sky matrix file path. smx_sun Path Sun-only (one sun patch) sky matrix file path for illuminance. smx_sun_img Path Sun-only (one sun pathc) sky matrix file path for rendering. frads.geom This module contains definitions of Vector and Polygon objects and other geometry related routines. Polygon dataclass 3D polygon class Attributes: Name Type Description vertices(List[Vector]) list of vertices of the polygon. __add__ ( other ) Merge two polygons. __post_init__ () . __sub__ ( other ) Polygon subtraction. Parameters: Name Type Description Default other Polygon subtract this polygon required Returns: Type Description Polygon Clipped polygon (Polygon) area () property Calculate the area of the polygon. centroid () property Return the geometric center point. extreme () property . extrude ( vector ) Extrude the polygon. Parameters: Name Type Description Default vector Vector extrude along the vector; required Returns: Name Type Description Polygon list a list of polygons; flip () Reverse the vertices order, thus reversing the normal. move ( vector ) Return the moved polygon along a vector. normal () property Calculate the polygon normal. rectangle3pts ( pt1 , pt2 , pt3 ) classmethod . rotate ( vector , angle ) . scale ( scale_vect , center ) Scale the polygon. Parameters: Name Type Description Default scale_vect Vector scale along x, y, z; required center Vector center of scaling required Return Scaled polygon (Polygon) shared_pts ( other ) Return the total number of share points between two polygons. to_list () Return a list of tuples. to_real () Convert the vertices to real arg string format. Vector dataclass 3D vector class. Attributes: Name Type Description x float x coordinate y float y coordinate z float z coordinate __add__ ( other ) Add the two vectors. Parameters: Name Type Description Default other(Vector) vector to add required Returns: Type Description Vector The added vector(Vector) __mul__ ( other ) Return the dot produce between two vectors. __str__ () Class string representation. Returns: Type Description str The string representation of the vector(str) angle_from ( other ) . coplanar ( other1 , other2 ) Test if the vector is coplanar with the other two vectors. cross ( other ) Return the cross product of the two vectors. Parameters: Name Type Description Default other Vector the vector to take a cross product required Returns: Type Description Vector The resulting vector distance_from ( other ) Calculate the distance between two points. length () property Get vector distance from origin. normalize () Return the unit vector. reverse () Return the reversed vector. rotate_3d ( vector , theta ) Rotate the point around the vector theta radians. Parameters: Name Type Description Default vector Vector rotation axis required theta float rotation radians required Returns: Type Description Vector the rotated point scale ( factor ) Scale the vector by a scalar. spherical ( theta , phi , r ) classmethod Construct a vector using spherical coordinates. to_list () Return a list containing the coordinates. to_sphr () Convert cartesian to spherical coordinates. to_tuple () Return a tuple containing the coordinates. convexhull ( points , normal ) Convex hull on coplanar points. Parameters: Name Type Description Default points list list of Point; required normal Vector plane's normal required get_polygon_limits ( polygon_list , offset = 0.0 ) Get the x,y,z limits from a list of polygons. getbbox ( polygons , offset = 0.0 ) Get a bounding box for a list of polygons. Return a list of polygon that is the orthogonal bounding box of a list of polygon. Parameters: Name Type Description Default polygons Sequence [ Polygon ] list of polygons required offset float make the box smaller or bigger 0.0 Returns: Type Description A list of polygon that is the bounding box. merge_polygon ( polygons ) Merge polygons into a polygon using Convex Hull. Parameters: Name Type Description Default polygons Sequence [ Polygon ] Polygons to be merged required Returns: Type Description Polygon Merged polygon polygon_center ( * polygons ) Calculate the center from polygons. frads.utils This module contains all utility functions used throughout frads. angle_basis_coeff ( basis ) Calculate klems basis coefficient batch_process ( commands , inputs = None , opaths = None , nproc = None ) Run commands in batches. Use subprocess.Popen to run commands. Parameters: Name Type Description Default commands List [ List [ str ]] commands as a list of strings. required inputs Optional [ List [ bytes ]] list of standard input to the commands. None opaths Optional [ List [ Path ]] list of paths to write standard output to. None nproc Optional [ int ] number of commands to run in parallel at a time. None Returns: Type Description None None bsdf2sdata ( bsdf ) Covert a bsdf object into a sdata object. bsdf_prim ( mod , ident , xmlpath , upvec , pe = False , thickness = 0.0 , xform = None , real_args = '0' ) Create a BSDF primtive. calc_reinsrc_dir ( mf , x1 = 0.5 , x2 = 0.5 ) Calculate Reinhart/Treganza sampling directions. Direct translation of Radiance reinsrc.cal file. Parameters: Name Type Description Default mf(int) multiplication factor. required x1(float, optional bin position 1 required x2(float, optional bin position 2 required Returns: Type Description List [ geom . Vector ] A list of geom.Vector List [ float ] A list of solid angle associated with each vector color_plastic_prim ( mod , ident , refl , red , green , blue , specu , rough ) Generate a colored plastic material. Parameters: Name Type Description Default mod(str) modifier to the primitive required ident(str) identifier to the primitive required refl float measured reflectance (0.0 - 1.0) required red; green; blue (int rgb values (0 - 255) required specu float material specularity (0.0 - 1.0) required rough float material roughness (0.0 - 1.0) required Returns: Type Description Primitive A material primtive frange_inc ( start , stop , step ) Generate increasing non-integer range. gen_blinds ( depth , width , height , spacing , angle , curve , movedown ) Generate genblinds command for genBSDF. gen_grid ( polygon , height , spacing ) Generate a grid of points for orthogonal planar surfaces. Parameters: Name Type Description Default polygon geom . Polygon a polygon object required height float points' distance from the surface in its normal direction required spacing float distance between the grid points required Returns: Type Description list List of the points as list get_flush_corner_rays_command ( ray_cnt , xres ) Flush the corner rays from a fisheye view. Parameters: Name Type Description Default ray_cnt int ray count; required xres int resolution of the square image; required Returns: Type Description list Command to generate cropped rays get_glazing_primitive ( panes ) Generate a BRTDfunc to represent a glazing system. glass_prim ( mod , ident , tr , tg , tb , refrac = 1.52 ) Generate a glass material. Parameters: Name Type Description Default mod str modifier to the primitive required ident str identifier to the primtive required tr, tg, tb (float transmmisivity in each channel (0.0 - 1.0) required refrac float refraction index (default=1.52) 1.52 Returns: Type Description Primitive material primtive (dict) id_generator ( size = 3 , chars = None ) Generate random characters. lambda_calc ( theta_lr , theta_up , nphi ) . material_lib () Generate a list of generic material primitives. neutral_plastic_prim ( mod , ident , refl , spec , rough ) Generate a neutral color plastic material. Parameters: Name Type Description Default mod(str) modifier to the primitive required ident(str) identifier to the primitive required refl float measured reflectance (0.0 - 1.0) required specu float material specularity (0.0 - 1.0) required rough float material roughness (0.0 - 1.0) required Returns: Type Description Primitive A material primtive neutral_trans_prim ( mod , ident , trans , refl , spec , rough ) Generate a neutral color plastic material. Parameters: Name Type Description Default mod(str) modifier to the primitive required ident(str) identifier to the primitive required refl float measured reflectance (0.0 - 1.0) required specu float material specularity (0.0 - 1.0) required rough float material roughness (0.0 - 1.0) required Returns: Type Description Primitive A material primtive opt2list ( opt ) Convert option dictionary to list. Key: str Value: str | float | int | bool | list Parameters: Name Type Description Default opt dict option dictionary required Returns: Type Description List [ str ] A list of strings polygon2prim ( polygon , modifier , identifier ) Generate a primitive from a polygon. primitive_normal ( primitive_paths ) Return a set of normal vectors given a list of primitive paths. pt_inclusion ( pt , polygon_pts ) Test whether a point is inside a polygon using winding number algorithm. run_write ( command , out , stdin = None ) Run command and write stdout to file. samp_dir ( primlist ) Calculate the primitives' average sampling direction weighted by area. sdata2bsdf ( sdata ) Convert sdata object to bsdf object. square2disk ( in_square_a , in_square_b ) Shirley-Chiu square to disk mapping. Parameters: Name Type Description Default in_square_a float [-1, 1] required in_square_b float [-1, 1] required tmit2tmis ( tmit ) Convert from transmittance to transmissivity. unpack_idf ( path ) Read and parse and idf files. unpack_primitives ( file ) Open a file a to parse primitive. up_vector ( primitives ) Define the up vector given primitives. Parameters: Name Type Description Default primitives list list of dictionary (primitives) required Returns: Type Description geom . Vector returns a str as x,y,z frads.matrix This module contains routines to generate sender and receiver objects, generate matrices by calling either rfluxmtx or rcontrib. points_as_sender ( pts_list , ray_cnt = None ) Construct a sender from a list of points. Parameters: Name Type Description Default pts_list(list) a list of list of float required ray_cnt(int) sender ray count required Returns: Type Description Sender A sender object prepare_surface ( * , prims , basis , left , offset , source , out ) Prepare the sender or receiver surface, adding appropriate tags. Parameters: Name Type Description Default prims(list) list of primitives required basis(str) sampling basis required left(bool) use instead the left-hand rule required offset(float) offset surface in its normal direction required source(str) surface light source for receiver required out output path required Returns: Type Description str The surface sender/receiver primitive as string rcontrib ( sender , modifier , octree , out , opt ) Calling rcontrib to generate the matrices. Parameters: Name Type Description Default sender Sender object required modifier str modifier str listing the receivers in octree required octree Union [ str , Path ] the octree that includes the environment and the receiver required opt List [ str ] option string required out Union [ str , Path ] output path required Returns: Type Description None None rcvr_oct ( receiver , env , oct_path ) Generate an octree of the environment and the receiver. Parameters: Name Type Description Default receiver receiver object required env environment file paths required oct_path Union [ str , Path ] Path to write the octree to required Returns: Type Description None None rfluxmtx ( sender , receiver , env , opt = None ) Calling rfluxmtx to generate the matrices. Parameters: Name Type Description Default sender Sender Sender object required receiver Receiver Receiver object required env Iterable [ Path ] model environment, basically anything that's not the sender or receiver required opt Optional [ List [ str ]] option string None Returns: Type Description None return the stdout of the rfluxmtx run. sky_as_receiver ( basis , out ) Instantiate a sky receiver object. Parameters: Name Type Description Default basis str receiver sampling basis {kf | r1 | sc25...} required Returns: Type Description Receiver A sky receiver object sun_as_receiver ( basis , smx_path , window_normals , full_mod = False ) Instantiate a sun receiver object. Parameters: Name Type Description Default basis receiver sampling basis {kf | r1 | sc25...} required smx_path Path sky/sun matrix file path required window_paths window file paths required Returns: Type Description Receiver A sun receiver object surface_as_receiver ( prim_list , basis , out , offset = None , left = False , source = 'glow' ) Instantiate a surface receiver object. Parameters: Name Type Description Default prim_list Sequence [ Primitive ] list of primitives(dict) required basis str receiver sampling basis {kf | r1 | sc25...} required out Union [None, str , Path ] output path required offset offset the surface in its normal direction None left bool use instead left-hand rule for matrix generation False source str light source for receiver object {glow|light} 'glow' Returns: Type Description Receiver A surface receiver object surface_as_sender ( prim_list , basis , offset = None , left = None ) Construct a sender from a surface. Parameters: Name Type Description Default prim_list(list) a list of primitives required basis(str) sender sampling basis required offset(float) move the sender surface in its normal direction required left(bool) Use left-hand rule instead for matrix generation required Returns: Type Description Sender A sender object (Sender) view_as_sender ( view , ray_cnt , xres , yres ) Construct a sender from a view. Parameters: Name Type Description Default view View a view object; required ray_cnt int ray count; required xres, yres image resolution required c2c Set to True to trim the fisheye corner rays. required Returns: Type Description Sender A sender object","title":"Reference"},{"location":"reference/#reference","text":"This reference guide contains a detailed description of the frads API. It describes how the functions and methods work and which parameter can be used. It assumes that you have an understanding of the key concepts. Color Parsers Sky Data types and containers Geometry Utility Matrix","title":"Reference"},{"location":"reference/#frads.color","text":"This module contains all color and spectral-related functionalities.","title":"color"},{"location":"reference/#frads.color.get_conversion_matrix","text":"Get CIE conversion matrix based on color primaries. Parameters: Name Type Description Default prims ColorPrimaries Color space color primaries required reverse bool get RGB to XYZ conversion matrix instead False Returns: Type Description tuple The conversion matrix coefficients in a 1-dimensional tuple.","title":"get_conversion_matrix()"},{"location":"reference/#frads.color.get_interpolated_cie_xyz","text":"Load CIE tristimulus data according to input wavelength. Also load melanopic action spectra data as well. Parameters: Name Type Description Default inp_wvl Sequence [ Union [ float , int ]] a list of input wavelength in nm required observer str 2\u00b0 or 10\u00b0 observer for the colar matching function. required Returns: Type Description List [ tuple ] CIE-x List [ tuple ] CIE-y List [ tuple ] CIE-z List [ tuple ] Melanopic action spectra List [ tuple ] Index of input wavelength corresponding to available tristimulus data","title":"get_interpolated_cie_xyz()"},{"location":"reference/#frads.color.get_interpolated_mlnp","text":"Load CIE tristimulus data according to input wavelength. Also load melanopic action spectra data as well. Parameters: Name Type Description Default inp_wvl Sequence [ Union [ float , int ]] a list of input wavelength in nm required Returns: Type Description List [ float ] Melanopic action spectra","title":"get_interpolated_mlnp()"},{"location":"reference/#frads.color.rgb2xyz","text":"Convert RGB to CIE XYZ. Parameters: Name Type Description Default red float red required green float green required blue float blue required coeffs tuple coversion matrix. required Returns: Type Description Tuple [ float , float , float ] CIE X, Y, Z. Raise ValueError with invalid coeffs.","title":"rgb2xyz()"},{"location":"reference/#frads.color.spec2xyz","text":"Convert spectral data to CIE XYZ. Parameters: Name Type Description Default cie_xyz_bar CIE color matching function. required spec list input spectral data as a dictionary sorted by wavelenth as key. required emis bool flag whether the input data is emissive in nature. False Returns: Type Description tuple CIE X, Y, Z Note Assuming input wavelength is a subset of the CIE ones","title":"spec2xyz()"},{"location":"reference/#frads.color.xyz2rgb","text":"Convert CIE XYZ to RGB. Parameters: Name Type Description Default cie_x float cie_x required cie_y float cie_y required cie_z float cie_z required coeffs tuple conversion matrix required Returns: Type Description Tuple [ float , float , float ] Red, Green, Blue Raise ValueError for invalid coeffs.","title":"xyz2rgb()"},{"location":"reference/#frads.color.xyz2xy","text":"Convert CIE XYZ to xy chromaticity. Parameters: Name Type Description Default cie_x float CIE X required cie_y float CIE Y required cie_z float CIE Z required Returns: Type Description float x chromoticity float y chromoticity","title":"xyz2xy()"},{"location":"reference/#frads.parsers","text":"This module contains all data parsing routines.","title":"parsers"},{"location":"reference/#frads.parsers.TensorTree","text":"The tensor tree object. Anisotropic tensor tree has should have 16 lists Attributes: Name Type Description parsed parsed tensor tree object) depth number of tree levels","title":"TensorTree"},{"location":"reference/#frads.parsers.TensorTree.get_branch_index","text":"Gets a set of index.","title":"get_branch_index()"},{"location":"reference/#frads.parsers.TensorTree.lookup","text":"Traverses a parsed tensor tree (a nexted list) given a input position.","title":"lookup()"},{"location":"reference/#frads.parsers.TensorTree.traverse","text":"Traverse a quadrant.","title":"traverse()"},{"location":"reference/#frads.parsers.get_nested_list_levels","text":"Calculate the number of levels given a nested list.","title":"get_nested_list_levels()"},{"location":"reference/#frads.parsers.get_rcontrib_options_args","text":"Add rcontrib specific options to a parser.","title":"get_rcontrib_options_args()"},{"location":"reference/#frads.parsers.get_rtrace_options_args","text":"Add rtrace options and flags to a parser.","title":"get_rtrace_options_args()"},{"location":"reference/#frads.parsers.parse_branch","text":"Prase tensor tree branches recursively by opening and closing curly braces. Parameters: Name Type Description Default token Generator [ str , None, None] token generator object. required Return children: parsed branches as nexted list","title":"parse_branch()"},{"location":"reference/#frads.parsers.parse_epw","text":"Parse epw file and return wea header and data.","title":"parse_epw()"},{"location":"reference/#frads.parsers.parse_idf","text":"Parse an IDF file into a dictionary.","title":"parse_idf()"},{"location":"reference/#frads.parsers.parse_igsdb_json","text":"Parse a JSON file from IGSDB.","title":"parse_igsdb_json()"},{"location":"reference/#frads.parsers.parse_mrad_config","text":"Parse mrad configuration file.","title":"parse_mrad_config()"},{"location":"reference/#frads.parsers.parse_opt","text":"Parsing option string into a dictionary. Parameters: Name Type Description Default opt_str str rtrace option parameters as a string required Returns: Type Description dict An option dictionary","title":"parse_opt()"},{"location":"reference/#frads.parsers.parse_optics","text":"Read and parse an optics file.","title":"parse_optics()"},{"location":"reference/#frads.parsers.parse_polygon","text":"Parse real arguments to polygon. Parameters: Name Type Description Default primitive a dictionary object containing a primitive required Returns: Type Description geom . Polygon modified primitive","title":"parse_polygon()"},{"location":"reference/#frads.parsers.parse_primitive","text":"Parse Radiance primitives inside a file path into a list of dictionary. Parameters: Name Type Description Default lines list list of lines as strings required Returns: Type Description List [ Primitive ] list of primitives as dictionaries Notes Dropping support for alias type","title":"parse_primitive()"},{"location":"reference/#frads.parsers.parse_rad_header","text":"Parse a Radiance matrix file header. Parameters: Name Type Description Default header_str(str) header as string required Returns: Type Description tuple A tuple contain nrow, ncol, ncomp, datatype","title":"parse_rad_header()"},{"location":"reference/#frads.parsers.parse_ttree","text":"Parse a tensor tree. Parameters: Name Type Description Default data_str str input data string required Returns: Type Description list A nested list that is the tree","title":"parse_ttree()"},{"location":"reference/#frads.parsers.parse_vu","text":"Parse view string into a View object. Parameters: Name Type Description Default vu_str str view parameters as a string required Returns: Type Description View A view object","title":"parse_vu()"},{"location":"reference/#frads.parsers.parse_wea","text":"Parse a wea file in its entirety.","title":"parse_wea()"},{"location":"reference/#frads.parsers.tokenize","text":"Generator for tokenizing a string that is seperated by a space or a comma. Parameters: Name Type Description Default inp str input string required Yields: Type Description Generator [ str , None, None] next token","title":"tokenize()"},{"location":"reference/#frads.sky","text":"Routines for generating sky models","title":"sky"},{"location":"reference/#frads.sky.basis_glow","text":"Generate a set of regular sky and ground glow primitives string. Parameters: Name Type Description Default sky_basis(str) sky sampling basis, e.g. r1, r4 required Returns: Type Description str ground and sky glow string, usually used for rfluxmtx calls.","title":"basis_glow()"},{"location":"reference/#frads.sky.check_sun_above_horizon","text":"Remove non-daylight hour entries.","title":"check_sun_above_horizon()"},{"location":"reference/#frads.sky.filter_data_by_direct_sun","text":"Remove wea data entries with zero solar luminance according to Perez All-Weather sky model. If window normal supplied, eliminate entries not seen by window. Window field of view is 176 deg with 2 deg tolerance on each side. Parameters: Name Type Description Default data Sequence [ WeaData ] Sequence[WeaData], required meta WeaMetaData WeaMetaData, required window_normal Optional [ Sequence [ geom . Vector ]] Optional[Sequence[geom.Vector]] = None, None Returns: Name Type Description data List [ WeaData ]","title":"filter_data_by_direct_sun()"},{"location":"reference/#frads.sky.filter_data_with_zero_dni","text":"Filter out data entries with zero direct normal irradiance.","title":"filter_data_with_zero_dni()"},{"location":"reference/#frads.sky.filter_wea","text":"Obtain and prepare weather file data. Parameters: Name Type Description Default wea_data(List[WeaData]) A list of WeaData. required meta_data(WeaMetaData) A instance of WeaMetaData object. required start_hour(float, optional Filter out wea data before this hour. required end_hour(float, optional Filter out wea data after this hour. required daylight_hours_only(bool, optional Filter out wea data below horizon. required remove_zero(bool, optional Filter out wea data with zero DNI. required window_normals(List[geom.Vector], optional Filter out wea data with direct sun not seen by these window normals. required Returns: Name Type Description wea_data List [ WeaData ] Filterd list of wea data datetime_stamps list Remaining datetime stamps","title":"filter_wea()"},{"location":"reference/#frads.sky.gen_sun_source_culled","text":"Generate a culled set of sun sources based on either window orientation and/or climate-based sky matrix. The reduced set of sun sources will significantly speed up the direct-sun matrix generation. Parameters: Name Type Description Default mf(int) multiplication factor, usually 1, 2, or 4. required smx_path(str) Optional, sky matrix path, usually the output of gendaymtx required window_normals(str) Optional, window normals required Returns: Type Description str A tuple of culled set of sun light and source primitive string, str corresponding modifier strings, and the full set of modifier string.","title":"gen_sun_source_culled()"},{"location":"reference/#frads.sky.gen_sun_source_full","text":"Generate a full set of sun light sources according to Reinhart basis. Parameters: Name Type Description Default mf(int) multiplication factor, usually 1, 2, or 4. required Returns: Type Description str A tuple of full set of sun light and source primitive string str and associated modifier string.","title":"gen_sun_source_full()"},{"location":"reference/#frads.sky.gendaylit_cmd","text":"Get a gendaylit command as a list.","title":"gendaylit_cmd()"},{"location":"reference/#frads.sky.gendaymtx","text":"Call gendaymtx to generate a sky/sun matrix and write results to out. It takes either a .wea file path or wea data and metadata (defined in frads.types). If both are provided, .wea file path will be used. Parameters: Name Type Description Default out(str or pathlib.Path outpath file path required mf(int) multiplication factor required data(Sequence[WeaData], optional A sequence of WeaData. required meta(WeaMetaData, optional A instance of WeaMetaData object. required wpath(Path, optional .wea file path. required direct(bool, optional Whether to generate sun-only sky matrix. required solar(bool, optional Whether to generate sky matrix if solar spectrum. required onesun(bool, optional Whether to generate single sun matrix (five-phase). required rotate(float, optional rotate the sky counter-clock wise, looking down. required binary(bool, optional Whether to have outputs in single precision floats. required Returns: Name Type Description cmd List [ str ] the gendaymtx command called. Raises: Type Description ValueError An error occurs if neither a .wea path nor wea data is provided.","title":"gendaymtx()"},{"location":"reference/#frads.sky.grndglow","text":"Generate a set of ground string Parameters: Name Type Description Default basis(str) Optional default=u required Returns: Type Description str A set of ground glow primitive string","title":"grndglow()"},{"location":"reference/#frads.sky.skyglow","text":"Generate a set of skyglow string Parameters: Name Type Description Default basis(str) e.g., r1, r2, r4 required upvect(str) Optional, default=+Y required Returns: Type Description str A set of sky glow primitive string","title":"skyglow()"},{"location":"reference/#frads.sky.solar_angle","text":"Simplified translation from the Radiance sun.c and gensky.c code.","title":"solar_angle()"},{"location":"reference/#frads.sky.start_end_hour","text":"Remove wea data entries outside of the start and end hour.","title":"start_end_hour()"},{"location":"reference/#frads.types","text":"This module contains all data types used across frads. The exceptions are the Vector and Polygon class in the geom.py module.","title":"types"},{"location":"reference/#frads.types.Primitive","text":"Bases: NamedTuple Radiance Primitive. Attributes one-to-one mapped from Radiance. Attributes: Name Type Description modifier str modifier, which primitive modifies this one ptype str primitive type identifier str identifier, name of this primitive str_arg Sequence [ str ] string argument real_arg Sequence [ Union [ int , float ]] real argument int_arg str integer argument, not used in Radiance (default=\"0\")","title":"Primitive"},{"location":"reference/#frads.types.Sender","text":"Sender object for matrix generation. Attributes: Name Type Description form str types of sender, {surface(s)|view(v)|points(p)} sender bytes the sender string xres Optional [ int ] sender x dimension yres Optional [ int ] sender y dimension","title":"Sender"},{"location":"reference/#frads.types.Receiver","text":"Receiver object for matrix generation. Attributes: Name Type Description receiver str receiver string which can be appended to one another basis str receiver basis, usually kf, r4, r6; modifier str modifiers to the receiver objects;","title":"Receiver"},{"location":"reference/#frads.types.PaneProperty","text":"Bases: NamedTuple Window pane property object. Attributes: Name Type Description name str material name. thickness float pane thickness. gtype str material type. coated_side str coated side, front or back. wavelength List [ float ] Wavelength data. transmittance List [ float ] Transmittance data. reflectance_front List [ float ] Reflectance front data. reflectance_back List [ float ] Reflectance back data.","title":"PaneProperty"},{"location":"reference/#frads.types.WeaMetaData","text":"Bases: NamedTuple Weather related meta data object. Attributes: Name Type Description city str City. country str Country. latitude float Latitude. longitude float Longitude. timezone int Timezone as standard meridian. elevation float Site elevation (m).","title":"WeaMetaData"},{"location":"reference/#frads.types.WeaMetaData.wea_header","text":"Return a .wea format header.","title":"wea_header()"},{"location":"reference/#frads.types.WeaData","text":"Bases: NamedTuple Weather related data object. Attributes: Name Type Description month Month. day Day. hour Hour. minute Minutes. second Seconds. hours Times with minutes as fraction. dni float Direct normal irradiance (W/m2). dhi float Diffuse horizontal irradiance (W/m2). aod float Aeroal Optical Depth (default = 0). cc float Cloud cover (default = 0). year float default = 2000.","title":"WeaData"},{"location":"reference/#frads.types.MradModel","text":"Bases: NamedTuple Mrad model object. Attributes: Name Type Description name str Model name material_path Path Material path window_groups Dict [ str , List [ Primitive ]] Window primitives grouped by files window_normals List [ Vector ] Window normals sender_grid dict Grid ray samples mapped to grid surface name. sender_view dict View ray samples mapped to view name. views dict Mapping from View name to view properties. receiver_sky dict Sky as the receiver object. bsdf_xml dict Mapping from window groupd name to BSDF file path. cfs_paths list The list of files used for direct-sun coefficient calculations. ncp_shades dict The list of non-coplanar shading files. black_env_path Path Blackened environment file path.","title":"MradModel"},{"location":"reference/#frads.types.MradPath","text":"This dataclass object holds all the paths during a mrad run. All attributes are initiated with default_factory set to the attribute's type, which means this object can be instantiated without any arguments and add define its attributes later. Attributes: Name Type Description pvmx Dict [ str , Path ] Point view matrix paths mapped to grid name. pvmxd Dict [ str , Path ] Direct only point view matrix paths mapped to grid name. pdsmx Dict [ str , Path ] Point daylight coefficient matrix file paths mapped to grid name. pcdsmx Dict [ str , Path ] Point direct-sun coefficient matrix file paths mapped to grid name. vvmx Dict [ str , Path ] View view matrix paths mapped to view name. vvmxd Dict [ str , Path ] Direct only view view matrix paths mapped to view name. vdsmx Dict [ str , Path ] View daylight coefficient matrix file paths mapped to grid name. vcdsmx Dict [ str , Path ] View direct-sun coefficient matrix file paths mapped to view name. vcdfmx Dict [ str , Path ] View direct-sun coefficient(f) matrix file paths mapped to view name. vcdrmx Dict [ str , Path ] View direct-sun coefficient(r) matrix file paths mapped to view name. vmap Dict [ str , Path ] View matrix material map mapped to view name. cdmap Dict [ str , Path ] Direct-sun matrix material map mapped to view name. dmx Dict [ str , Path ] Daylight matrix file paths mapped to window name. dmxd Dict [ str , Path ] Direct daylight matrix mapped to window name. smxd Path Sun-only (3-4 sun patches) sky matrix file path. smx Path sky matrix file path. smx_sun Path Sun-only (one sun patch) sky matrix file path for illuminance. smx_sun_img Path Sun-only (one sun pathc) sky matrix file path for rendering.","title":"MradPath"},{"location":"reference/#frads.geom","text":"This module contains definitions of Vector and Polygon objects and other geometry related routines.","title":"geom"},{"location":"reference/#frads.geom.Polygon","text":"3D polygon class Attributes: Name Type Description vertices(List[Vector]) list of vertices of the polygon.","title":"Polygon"},{"location":"reference/#frads.geom.Polygon.__add__","text":"Merge two polygons.","title":"__add__()"},{"location":"reference/#frads.geom.Polygon.__post_init__","text":".","title":"__post_init__()"},{"location":"reference/#frads.geom.Polygon.__sub__","text":"Polygon subtraction. Parameters: Name Type Description Default other Polygon subtract this polygon required Returns: Type Description Polygon Clipped polygon (Polygon)","title":"__sub__()"},{"location":"reference/#frads.geom.Polygon.area","text":"Calculate the area of the polygon.","title":"area()"},{"location":"reference/#frads.geom.Polygon.centroid","text":"Return the geometric center point.","title":"centroid()"},{"location":"reference/#frads.geom.Polygon.extreme","text":".","title":"extreme()"},{"location":"reference/#frads.geom.Polygon.extrude","text":"Extrude the polygon. Parameters: Name Type Description Default vector Vector extrude along the vector; required Returns: Name Type Description Polygon list a list of polygons;","title":"extrude()"},{"location":"reference/#frads.geom.Polygon.flip","text":"Reverse the vertices order, thus reversing the normal.","title":"flip()"},{"location":"reference/#frads.geom.Polygon.move","text":"Return the moved polygon along a vector.","title":"move()"},{"location":"reference/#frads.geom.Polygon.normal","text":"Calculate the polygon normal.","title":"normal()"},{"location":"reference/#frads.geom.Polygon.rectangle3pts","text":".","title":"rectangle3pts()"},{"location":"reference/#frads.geom.Polygon.rotate","text":".","title":"rotate()"},{"location":"reference/#frads.geom.Polygon.scale","text":"Scale the polygon. Parameters: Name Type Description Default scale_vect Vector scale along x, y, z; required center Vector center of scaling required Return Scaled polygon (Polygon)","title":"scale()"},{"location":"reference/#frads.geom.Polygon.shared_pts","text":"Return the total number of share points between two polygons.","title":"shared_pts()"},{"location":"reference/#frads.geom.Polygon.to_list","text":"Return a list of tuples.","title":"to_list()"},{"location":"reference/#frads.geom.Polygon.to_real","text":"Convert the vertices to real arg string format.","title":"to_real()"},{"location":"reference/#frads.geom.Vector","text":"3D vector class. Attributes: Name Type Description x float x coordinate y float y coordinate z float z coordinate","title":"Vector"},{"location":"reference/#frads.geom.Vector.__add__","text":"Add the two vectors. Parameters: Name Type Description Default other(Vector) vector to add required Returns: Type Description Vector The added vector(Vector)","title":"__add__()"},{"location":"reference/#frads.geom.Vector.__mul__","text":"Return the dot produce between two vectors.","title":"__mul__()"},{"location":"reference/#frads.geom.Vector.__str__","text":"Class string representation. Returns: Type Description str The string representation of the vector(str)","title":"__str__()"},{"location":"reference/#frads.geom.Vector.angle_from","text":".","title":"angle_from()"},{"location":"reference/#frads.geom.Vector.coplanar","text":"Test if the vector is coplanar with the other two vectors.","title":"coplanar()"},{"location":"reference/#frads.geom.Vector.cross","text":"Return the cross product of the two vectors. Parameters: Name Type Description Default other Vector the vector to take a cross product required Returns: Type Description Vector The resulting vector","title":"cross()"},{"location":"reference/#frads.geom.Vector.distance_from","text":"Calculate the distance between two points.","title":"distance_from()"},{"location":"reference/#frads.geom.Vector.length","text":"Get vector distance from origin.","title":"length()"},{"location":"reference/#frads.geom.Vector.normalize","text":"Return the unit vector.","title":"normalize()"},{"location":"reference/#frads.geom.Vector.reverse","text":"Return the reversed vector.","title":"reverse()"},{"location":"reference/#frads.geom.Vector.rotate_3d","text":"Rotate the point around the vector theta radians. Parameters: Name Type Description Default vector Vector rotation axis required theta float rotation radians required Returns: Type Description Vector the rotated point","title":"rotate_3d()"},{"location":"reference/#frads.geom.Vector.scale","text":"Scale the vector by a scalar.","title":"scale()"},{"location":"reference/#frads.geom.Vector.spherical","text":"Construct a vector using spherical coordinates.","title":"spherical()"},{"location":"reference/#frads.geom.Vector.to_list","text":"Return a list containing the coordinates.","title":"to_list()"},{"location":"reference/#frads.geom.Vector.to_sphr","text":"Convert cartesian to spherical coordinates.","title":"to_sphr()"},{"location":"reference/#frads.geom.Vector.to_tuple","text":"Return a tuple containing the coordinates.","title":"to_tuple()"},{"location":"reference/#frads.geom.convexhull","text":"Convex hull on coplanar points. Parameters: Name Type Description Default points list list of Point; required normal Vector plane's normal required","title":"convexhull()"},{"location":"reference/#frads.geom.get_polygon_limits","text":"Get the x,y,z limits from a list of polygons.","title":"get_polygon_limits()"},{"location":"reference/#frads.geom.getbbox","text":"Get a bounding box for a list of polygons. Return a list of polygon that is the orthogonal bounding box of a list of polygon. Parameters: Name Type Description Default polygons Sequence [ Polygon ] list of polygons required offset float make the box smaller or bigger 0.0 Returns: Type Description A list of polygon that is the bounding box.","title":"getbbox()"},{"location":"reference/#frads.geom.merge_polygon","text":"Merge polygons into a polygon using Convex Hull. Parameters: Name Type Description Default polygons Sequence [ Polygon ] Polygons to be merged required Returns: Type Description Polygon Merged polygon","title":"merge_polygon()"},{"location":"reference/#frads.geom.polygon_center","text":"Calculate the center from polygons.","title":"polygon_center()"},{"location":"reference/#frads.utils","text":"This module contains all utility functions used throughout frads.","title":"utils"},{"location":"reference/#frads.utils.angle_basis_coeff","text":"Calculate klems basis coefficient","title":"angle_basis_coeff()"},{"location":"reference/#frads.utils.batch_process","text":"Run commands in batches. Use subprocess.Popen to run commands. Parameters: Name Type Description Default commands List [ List [ str ]] commands as a list of strings. required inputs Optional [ List [ bytes ]] list of standard input to the commands. None opaths Optional [ List [ Path ]] list of paths to write standard output to. None nproc Optional [ int ] number of commands to run in parallel at a time. None Returns: Type Description None None","title":"batch_process()"},{"location":"reference/#frads.utils.bsdf2sdata","text":"Covert a bsdf object into a sdata object.","title":"bsdf2sdata()"},{"location":"reference/#frads.utils.bsdf_prim","text":"Create a BSDF primtive.","title":"bsdf_prim()"},{"location":"reference/#frads.utils.calc_reinsrc_dir","text":"Calculate Reinhart/Treganza sampling directions. Direct translation of Radiance reinsrc.cal file. Parameters: Name Type Description Default mf(int) multiplication factor. required x1(float, optional bin position 1 required x2(float, optional bin position 2 required Returns: Type Description List [ geom . Vector ] A list of geom.Vector List [ float ] A list of solid angle associated with each vector","title":"calc_reinsrc_dir()"},{"location":"reference/#frads.utils.color_plastic_prim","text":"Generate a colored plastic material. Parameters: Name Type Description Default mod(str) modifier to the primitive required ident(str) identifier to the primitive required refl float measured reflectance (0.0 - 1.0) required red; green; blue (int rgb values (0 - 255) required specu float material specularity (0.0 - 1.0) required rough float material roughness (0.0 - 1.0) required Returns: Type Description Primitive A material primtive","title":"color_plastic_prim()"},{"location":"reference/#frads.utils.frange_inc","text":"Generate increasing non-integer range.","title":"frange_inc()"},{"location":"reference/#frads.utils.gen_blinds","text":"Generate genblinds command for genBSDF.","title":"gen_blinds()"},{"location":"reference/#frads.utils.gen_grid","text":"Generate a grid of points for orthogonal planar surfaces. Parameters: Name Type Description Default polygon geom . Polygon a polygon object required height float points' distance from the surface in its normal direction required spacing float distance between the grid points required Returns: Type Description list List of the points as list","title":"gen_grid()"},{"location":"reference/#frads.utils.get_flush_corner_rays_command","text":"Flush the corner rays from a fisheye view. Parameters: Name Type Description Default ray_cnt int ray count; required xres int resolution of the square image; required Returns: Type Description list Command to generate cropped rays","title":"get_flush_corner_rays_command()"},{"location":"reference/#frads.utils.get_glazing_primitive","text":"Generate a BRTDfunc to represent a glazing system.","title":"get_glazing_primitive()"},{"location":"reference/#frads.utils.glass_prim","text":"Generate a glass material. Parameters: Name Type Description Default mod str modifier to the primitive required ident str identifier to the primtive required tr, tg, tb (float transmmisivity in each channel (0.0 - 1.0) required refrac float refraction index (default=1.52) 1.52 Returns: Type Description Primitive material primtive (dict)","title":"glass_prim()"},{"location":"reference/#frads.utils.id_generator","text":"Generate random characters.","title":"id_generator()"},{"location":"reference/#frads.utils.lambda_calc","text":".","title":"lambda_calc()"},{"location":"reference/#frads.utils.material_lib","text":"Generate a list of generic material primitives.","title":"material_lib()"},{"location":"reference/#frads.utils.neutral_plastic_prim","text":"Generate a neutral color plastic material. Parameters: Name Type Description Default mod(str) modifier to the primitive required ident(str) identifier to the primitive required refl float measured reflectance (0.0 - 1.0) required specu float material specularity (0.0 - 1.0) required rough float material roughness (0.0 - 1.0) required Returns: Type Description Primitive A material primtive","title":"neutral_plastic_prim()"},{"location":"reference/#frads.utils.neutral_trans_prim","text":"Generate a neutral color plastic material. Parameters: Name Type Description Default mod(str) modifier to the primitive required ident(str) identifier to the primitive required refl float measured reflectance (0.0 - 1.0) required specu float material specularity (0.0 - 1.0) required rough float material roughness (0.0 - 1.0) required Returns: Type Description Primitive A material primtive","title":"neutral_trans_prim()"},{"location":"reference/#frads.utils.opt2list","text":"Convert option dictionary to list. Key: str Value: str | float | int | bool | list Parameters: Name Type Description Default opt dict option dictionary required Returns: Type Description List [ str ] A list of strings","title":"opt2list()"},{"location":"reference/#frads.utils.polygon2prim","text":"Generate a primitive from a polygon.","title":"polygon2prim()"},{"location":"reference/#frads.utils.primitive_normal","text":"Return a set of normal vectors given a list of primitive paths.","title":"primitive_normal()"},{"location":"reference/#frads.utils.pt_inclusion","text":"Test whether a point is inside a polygon using winding number algorithm.","title":"pt_inclusion()"},{"location":"reference/#frads.utils.run_write","text":"Run command and write stdout to file.","title":"run_write()"},{"location":"reference/#frads.utils.samp_dir","text":"Calculate the primitives' average sampling direction weighted by area.","title":"samp_dir()"},{"location":"reference/#frads.utils.sdata2bsdf","text":"Convert sdata object to bsdf object.","title":"sdata2bsdf()"},{"location":"reference/#frads.utils.square2disk","text":"Shirley-Chiu square to disk mapping. Parameters: Name Type Description Default in_square_a float [-1, 1] required in_square_b float [-1, 1] required","title":"square2disk()"},{"location":"reference/#frads.utils.tmit2tmis","text":"Convert from transmittance to transmissivity.","title":"tmit2tmis()"},{"location":"reference/#frads.utils.unpack_idf","text":"Read and parse and idf files.","title":"unpack_idf()"},{"location":"reference/#frads.utils.unpack_primitives","text":"Open a file a to parse primitive.","title":"unpack_primitives()"},{"location":"reference/#frads.utils.up_vector","text":"Define the up vector given primitives. Parameters: Name Type Description Default primitives list list of dictionary (primitives) required Returns: Type Description geom . Vector returns a str as x,y,z","title":"up_vector()"},{"location":"reference/#frads.matrix","text":"This module contains routines to generate sender and receiver objects, generate matrices by calling either rfluxmtx or rcontrib.","title":"matrix"},{"location":"reference/#frads.matrix.points_as_sender","text":"Construct a sender from a list of points. Parameters: Name Type Description Default pts_list(list) a list of list of float required ray_cnt(int) sender ray count required Returns: Type Description Sender A sender object","title":"points_as_sender()"},{"location":"reference/#frads.matrix.prepare_surface","text":"Prepare the sender or receiver surface, adding appropriate tags. Parameters: Name Type Description Default prims(list) list of primitives required basis(str) sampling basis required left(bool) use instead the left-hand rule required offset(float) offset surface in its normal direction required source(str) surface light source for receiver required out output path required Returns: Type Description str The surface sender/receiver primitive as string","title":"prepare_surface()"},{"location":"reference/#frads.matrix.rcontrib","text":"Calling rcontrib to generate the matrices. Parameters: Name Type Description Default sender Sender object required modifier str modifier str listing the receivers in octree required octree Union [ str , Path ] the octree that includes the environment and the receiver required opt List [ str ] option string required out Union [ str , Path ] output path required Returns: Type Description None None","title":"rcontrib()"},{"location":"reference/#frads.matrix.rcvr_oct","text":"Generate an octree of the environment and the receiver. Parameters: Name Type Description Default receiver receiver object required env environment file paths required oct_path Union [ str , Path ] Path to write the octree to required Returns: Type Description None None","title":"rcvr_oct()"},{"location":"reference/#frads.matrix.rfluxmtx","text":"Calling rfluxmtx to generate the matrices. Parameters: Name Type Description Default sender Sender Sender object required receiver Receiver Receiver object required env Iterable [ Path ] model environment, basically anything that's not the sender or receiver required opt Optional [ List [ str ]] option string None Returns: Type Description None return the stdout of the rfluxmtx run.","title":"rfluxmtx()"},{"location":"reference/#frads.matrix.sky_as_receiver","text":"Instantiate a sky receiver object. Parameters: Name Type Description Default basis str receiver sampling basis {kf | r1 | sc25...} required Returns: Type Description Receiver A sky receiver object","title":"sky_as_receiver()"},{"location":"reference/#frads.matrix.sun_as_receiver","text":"Instantiate a sun receiver object. Parameters: Name Type Description Default basis receiver sampling basis {kf | r1 | sc25...} required smx_path Path sky/sun matrix file path required window_paths window file paths required Returns: Type Description Receiver A sun receiver object","title":"sun_as_receiver()"},{"location":"reference/#frads.matrix.surface_as_receiver","text":"Instantiate a surface receiver object. Parameters: Name Type Description Default prim_list Sequence [ Primitive ] list of primitives(dict) required basis str receiver sampling basis {kf | r1 | sc25...} required out Union [None, str , Path ] output path required offset offset the surface in its normal direction None left bool use instead left-hand rule for matrix generation False source str light source for receiver object {glow|light} 'glow' Returns: Type Description Receiver A surface receiver object","title":"surface_as_receiver()"},{"location":"reference/#frads.matrix.surface_as_sender","text":"Construct a sender from a surface. Parameters: Name Type Description Default prim_list(list) a list of primitives required basis(str) sender sampling basis required offset(float) move the sender surface in its normal direction required left(bool) Use left-hand rule instead for matrix generation required Returns: Type Description Sender A sender object (Sender)","title":"surface_as_sender()"},{"location":"reference/#frads.matrix.view_as_sender","text":"Construct a sender from a view. Parameters: Name Type Description Default view View a view object; required ray_cnt int ray count; required xres, yres image resolution required c2c Set to True to trim the fisheye corner rays. required Returns: Type Description Sender A sender object","title":"view_as_sender()"},{"location":"tutorials/","text":"New to frads or Radiance simulation? Read through this material to quickly get up and running. You'll learn how to get started with some of the command-line tools (CLI) and then Application Programming Interface (API) Quick Installation Guide Using mrad for a complete annual simulation Using gen to generate things Other CLI tools Scripting your own workflow","title":"Tutorials"},{"location":"manual/","text":"Frads CLI manual mrad gen gencolorsky","title":"Index"},{"location":"manual/gencolorsky/","text":"gencolorsky gencolorsky <year> <month> <day> <hour> <minute> [options] Gencolorsky uses libRadtran to compute spatially- and spectrally-resolved sky radiation data based on an Earth\u2019s spherical atmosphere radiative transfer model that includes Rayleigh scattering by air molecules, molecular absorption, aerosol, water, and ice clouds. One of the main command-line programs in libRadtran, uvspec, is invoked to compute the sky radiance at every r\u00b0 (default 3\u00b0) in both the azimuth and altitude directions. Within uvspec, the DISORT radiative transfer solver is used. Extraterrestrial solar source data (280-800 nm), at 1nm interval, are used to generate spectrally-resolved sky radiation data at each sample point, which by default is computed at a 10 nm interval from 360 nm to 800 nm. By default, this sky spectral data is converted to Radiance RGB using CIE XYZ tristimulus with either the 2\u00b0 or 10\u00b0 standard observer, using user defined color space (default: Radiance RGB). If -i setting is used, the resulting three channels become photopic (CIE-Y), melanopic equivalent daylight il/luminance (EDI), and solar ir/radiance, respectively. The output is a folder called cs_{datetime} {lat} in the current working directory, containing a sky.rad file along with associated color data. The options to gencolorsky are can be found using -h flag on the command line. Options -a/--latitude Location latitude; positive is northern hemisphere (required) -o/--longitude Location longitude; positive is western (required) -m/--tzone : Location standard meridian (required) -u/--altitude : Location altitude in km, default = 0 -i/--pmt : Compute for photopic, melanopic, and solar for each of the three channels, instead of RGB. -r/--anglestep : Angular resolution at which the sky is sampled, default = 3\u00b0 -s/--observer : Standard observer, 2\u00b0 or 10\u00b0 -c/--colorspace : Colorspace from which the sky is derived, choices are {radiance, sharp, adobe, rimm, 709, p3, 2020}, default=Radiance -e/--atm : Atmospheric composition file. Default to use AFGL data that came with libRadtran, automatically chosen depending on location and time of year. -l/--aerosol : Standard aerosol profile. This option overwrites the aerosol optical depth setting,defined below. The profile choices are: {Continental_clean | Continental_average | Continental_polluted | Urban | Maritime_clean | Maritime_polluted | Maritime_tropical | Desert | Antarctic } . -b/--cloudcover : Cloud cover, [0, 1], 1 is complete cover. Cloud cover data can be sourced from TMY data. -d/--aod : Aerosol optical depth, which can be sourced from TMY data. -g/--cloudprofile : Cloud profile file path. Space separated file, three columns: height (km), liquid water content (LWC) (g/m3), effective radius (R_eff) (um). Default: water clouds exist from 2-5 km in altitude with a LWC of 2.5 g/m3 and R_eff of 100 um -t/--total : Compute GHI, DNI, and DHI, instead of full sky description. Handy for quick comparison against measurements. -v/--verbose : Verbosity -v=Debug, -vv=Info, -vvv=Warning, -vvvv=Error, -vvvvv=Critical, default=Warning Examples Compute direct normal, diffuse horizontal, and global horizontal irradiance in solar spectrum for 2022-06-21 10:00 in Berkeley CA USA, with clear sky and continental_average aerosol profile: gencolorsky 2022 6 21 10 0 -a 37.7 -o 122.2 -m 120 -l continental_average -t DNI: 864.40 W/m2; DHI: 124.47 W/m2; GHI: 862.96 W/m2 Compute RGB sky for 2022-12-21 16:30 in Berkeley, CA, USA, with .2 cloud cover and .3 aerosol optical depth: gencolorsky 2022 12 21 16 30 -a 37.7 -o 122.2 -m 120 -b .2 -d .3 Compute photopic, melanopic, and solar for each of the three-channel for the same sky: gencolorsky 2022 12 21 16 30 -a 37.7 -o 122.2 -m 120 -b .2 -d .3 -i","title":"gencolorsky"},{"location":"manual/gencolorsky/#gencolorsky","text":"gencolorsky <year> <month> <day> <hour> <minute> [options] Gencolorsky uses libRadtran to compute spatially- and spectrally-resolved sky radiation data based on an Earth\u2019s spherical atmosphere radiative transfer model that includes Rayleigh scattering by air molecules, molecular absorption, aerosol, water, and ice clouds. One of the main command-line programs in libRadtran, uvspec, is invoked to compute the sky radiance at every r\u00b0 (default 3\u00b0) in both the azimuth and altitude directions. Within uvspec, the DISORT radiative transfer solver is used. Extraterrestrial solar source data (280-800 nm), at 1nm interval, are used to generate spectrally-resolved sky radiation data at each sample point, which by default is computed at a 10 nm interval from 360 nm to 800 nm. By default, this sky spectral data is converted to Radiance RGB using CIE XYZ tristimulus with either the 2\u00b0 or 10\u00b0 standard observer, using user defined color space (default: Radiance RGB). If -i setting is used, the resulting three channels become photopic (CIE-Y), melanopic equivalent daylight il/luminance (EDI), and solar ir/radiance, respectively. The output is a folder called cs_{datetime} {lat} in the current working directory, containing a sky.rad file along with associated color data. The options to gencolorsky are can be found using -h flag on the command line.","title":"gencolorsky"},{"location":"manual/gencolorsky/#options","text":"-a/--latitude Location latitude; positive is northern hemisphere (required) -o/--longitude Location longitude; positive is western (required) -m/--tzone : Location standard meridian (required) -u/--altitude : Location altitude in km, default = 0 -i/--pmt : Compute for photopic, melanopic, and solar for each of the three channels, instead of RGB. -r/--anglestep : Angular resolution at which the sky is sampled, default = 3\u00b0 -s/--observer : Standard observer, 2\u00b0 or 10\u00b0 -c/--colorspace : Colorspace from which the sky is derived, choices are {radiance, sharp, adobe, rimm, 709, p3, 2020}, default=Radiance -e/--atm : Atmospheric composition file. Default to use AFGL data that came with libRadtran, automatically chosen depending on location and time of year. -l/--aerosol : Standard aerosol profile. This option overwrites the aerosol optical depth setting,defined below. The profile choices are: {Continental_clean | Continental_average | Continental_polluted | Urban | Maritime_clean | Maritime_polluted | Maritime_tropical | Desert | Antarctic } . -b/--cloudcover : Cloud cover, [0, 1], 1 is complete cover. Cloud cover data can be sourced from TMY data. -d/--aod : Aerosol optical depth, which can be sourced from TMY data. -g/--cloudprofile : Cloud profile file path. Space separated file, three columns: height (km), liquid water content (LWC) (g/m3), effective radius (R_eff) (um). Default: water clouds exist from 2-5 km in altitude with a LWC of 2.5 g/m3 and R_eff of 100 um -t/--total : Compute GHI, DNI, and DHI, instead of full sky description. Handy for quick comparison against measurements. -v/--verbose : Verbosity -v=Debug, -vv=Info, -vvv=Warning, -vvvv=Error, -vvvvv=Critical, default=Warning","title":"Options"},{"location":"manual/gencolorsky/#examples","text":"Compute direct normal, diffuse horizontal, and global horizontal irradiance in solar spectrum for 2022-06-21 10:00 in Berkeley CA USA, with clear sky and continental_average aerosol profile: gencolorsky 2022 6 21 10 0 -a 37.7 -o 122.2 -m 120 -l continental_average -t DNI: 864.40 W/m2; DHI: 124.47 W/m2; GHI: 862.96 W/m2 Compute RGB sky for 2022-12-21 16:30 in Berkeley, CA, USA, with .2 cloud cover and .3 aerosol optical depth: gencolorsky 2022 12 21 16 30 -a 37.7 -o 122.2 -m 120 -b .2 -d .3 Compute photopic, melanopic, and solar for each of the three-channel for the same sky: gencolorsky 2022 12 21 16 30 -a 37.7 -o 122.2 -m 120 -b .2 -d .3 -i","title":"Examples"},{"location":"manual/gen/","text":"Gen gen [-h] [-v] <command> [options] The gen command-line program consists of a host of commands that do the actual work. As the name suggests, gen generates things. Specifically, it can be used to generate a sensor grid, glazing description, a side-lit room model, and various types of matrices. Verbosity, the amount of information printed to your console, can be adjusted by using the -v option, where -v=debug; -vv=info; -vvv=warning; -vvvv=critical . By default, only warning information is displayed. Instead of display information onto the terminal, all logging information can also be redirected as standard error into a file. Information regarding how to run mrad and its sub-command can be display on your terminal by giving -h/--help options. gen -h or gen <command> -h or gen <command> <sub-command> -h Commands glaze grid matrix room","title":"Gen"},{"location":"manual/gen/#gen","text":"gen [-h] [-v] <command> [options] The gen command-line program consists of a host of commands that do the actual work. As the name suggests, gen generates things. Specifically, it can be used to generate a sensor grid, glazing description, a side-lit room model, and various types of matrices. Verbosity, the amount of information printed to your console, can be adjusted by using the -v option, where -v=debug; -vv=info; -vvv=warning; -vvvv=critical . By default, only warning information is displayed. Instead of display information onto the terminal, all logging information can also be redirected as standard error into a file. Information regarding how to run mrad and its sub-command can be display on your terminal by giving -h/--help options. gen -h or gen <command> -h or gen <command> <sub-command> -h","title":"Gen"},{"location":"manual/gen/#commands","text":"glaze grid matrix room","title":"Commands"},{"location":"manual/gen/glaze/","text":"gen glaze gen glaze [-h] [-v] <command> [options] gen glaze command can be used to generate a Radiance material definition from either a IGSDB JSON file or an LBNL Optics file. glaze can be used to generate a single or a double-pane glazing system. Options -x/--optics LBNL Optics file path[s]. Either optics files or IGSDB files (see below) is required. -d/--igsdb IGSDB JSON file path[s]. Either optics files (see above) or IGSDB files are required. Optional arguments: -c/--cspace : Color space (color primaries) (default: radiance) -s/--observer : CIE Observer 2\u00b0 or 10\u00b0 (default: 2) Example Generate a single-pane system using a IGSDB JSON file: gen glaze -d igsdb_product_23000.json void BRTDfunc VNE-63_on_Pure_Mid_Iron 10 sr_clear_r sr_clear_g sr_clear_b st_clear_r st_clear_g st_clear_b 0 0 0 glaze1.cal 0 19 0 0 0 0 0 0 0 0 0 -1 0.094 0.07 0.03 0.101 0.043 0.021 1.102 0.593 0.246 To generate a double-pane glazing system using two JSON files downloaded from IGSDB , using the default color primaries and CIE observer, gen glaze -d 82378.json 43203.json void BRTDfunc VNE-63_on_Pure_Mid_Iron+VE-2M_on_Pure_Mid_Iron 10 if(Rdot,cr(fr(0.062),ft(1.310),fr(0.101)),cr(fr(0.094),ft(1.102),fr(0.070))) if(Rdot,cr(fr(0.035),ft(0.662),fr(0.043)),cr(fr(0.070),ft(0.593),fr(0.041))) if(Rdot,cr(fr(0.016),ft(0.277),fr(0.021)),cr(fr(0.030),ft(0.246),fr(0.017))) ft(1.310)*ft(1.102) ft(0.662)*ft(0.593) ft(0.277)*ft(0.246) 0 0 0 glaze2.cal 0 9 0 0 0 0 0 0 0 0 0","title":"glaze"},{"location":"manual/gen/glaze/#gen-glaze","text":"gen glaze [-h] [-v] <command> [options] gen glaze command can be used to generate a Radiance material definition from either a IGSDB JSON file or an LBNL Optics file. glaze can be used to generate a single or a double-pane glazing system.","title":"gen glaze"},{"location":"manual/gen/glaze/#options","text":"-x/--optics LBNL Optics file path[s]. Either optics files or IGSDB files (see below) is required. -d/--igsdb IGSDB JSON file path[s]. Either optics files (see above) or IGSDB files are required. Optional arguments: -c/--cspace : Color space (color primaries) (default: radiance) -s/--observer : CIE Observer 2\u00b0 or 10\u00b0 (default: 2)","title":"Options"},{"location":"manual/gen/glaze/#example","text":"Generate a single-pane system using a IGSDB JSON file: gen glaze -d igsdb_product_23000.json void BRTDfunc VNE-63_on_Pure_Mid_Iron 10 sr_clear_r sr_clear_g sr_clear_b st_clear_r st_clear_g st_clear_b 0 0 0 glaze1.cal 0 19 0 0 0 0 0 0 0 0 0 -1 0.094 0.07 0.03 0.101 0.043 0.021 1.102 0.593 0.246 To generate a double-pane glazing system using two JSON files downloaded from IGSDB , using the default color primaries and CIE observer, gen glaze -d 82378.json 43203.json void BRTDfunc VNE-63_on_Pure_Mid_Iron+VE-2M_on_Pure_Mid_Iron 10 if(Rdot,cr(fr(0.062),ft(1.310),fr(0.101)),cr(fr(0.094),ft(1.102),fr(0.070))) if(Rdot,cr(fr(0.035),ft(0.662),fr(0.043)),cr(fr(0.070),ft(0.593),fr(0.041))) if(Rdot,cr(fr(0.016),ft(0.277),fr(0.021)),cr(fr(0.030),ft(0.246),fr(0.017))) ft(1.310)*ft(1.102) ft(0.662)*ft(0.593) ft(0.277)*ft(0.246) 0 0 0 glaze2.cal 0 9 0 0 0 0 0 0 0 0 0","title":"Example"},{"location":"manual/gen/grid/","text":"gen grid gen grid [-h] [-v] <surface> <spacing> <height> [options] The grid command can be used to generate an equal-distance sensor grid. There are three required inputs to this command: surface , spacing , height , and a grid of sensor will be generate on the surface normal side, pointing in the same direction as the surface normal. Options -op Where the generate the sensor on the opposite side of the polygon. Example To generate a grid of sensor based on the polygon defined in the floor.rad file, with a spacing of 2 units and 3 units away from the surface. gen grid floor.rad 2 3 1 1.7 -2 0 0 -1 1 3.7 -2 0 0 -1 1 5.7 -2 0 0 -1 1 7.7 -2 0 0 -1 1 9.7 -2 0 0 -1 1 11.7 -2 0 0 -1 1 13.7 -2 0 0 -1 1 15.7 -2 0 0 -1 ...","title":"grid"},{"location":"manual/gen/grid/#gen-grid","text":"gen grid [-h] [-v] <surface> <spacing> <height> [options] The grid command can be used to generate an equal-distance sensor grid. There are three required inputs to this command: surface , spacing , height , and a grid of sensor will be generate on the surface normal side, pointing in the same direction as the surface normal.","title":"gen grid"},{"location":"manual/gen/grid/#options","text":"-op Where the generate the sensor on the opposite side of the polygon.","title":"Options"},{"location":"manual/gen/grid/#example","text":"To generate a grid of sensor based on the polygon defined in the floor.rad file, with a spacing of 2 units and 3 units away from the surface. gen grid floor.rad 2 3 1 1.7 -2 0 0 -1 1 3.7 -2 0 0 -1 1 5.7 -2 0 0 -1 1 7.7 -2 0 0 -1 1 9.7 -2 0 0 -1 1 11.7 -2 0 0 -1 1 13.7 -2 0 0 -1 1 15.7 -2 0 0 -1 ...","title":"Example"},{"location":"manual/gen/room/","text":"gen room gen room [-h] [-v] <width> <depth> <floor-floor> <floor-ceiling> [options] This command generates a side-lit rectangular room model with width , depth , floor-floor , and floor-ceiling . Options -w Window[s], starting x, z, width, height. -n Model name -t Facade thickness. -r/--rotate Rotate the room counter-clockwise Example Generate a room that's 12 unit wide, 14 unit deep and 3 unit height. gen room 12 14 3 Genearte the same room, adding two windows, each 4 unit wide and 1.5 unit in height. Viewing from outside, the lower left corner of the first window is 1 unit away from the left wall and 1 unit away from the floor. gen room 12 14 3 -w 1 1 4 1.5 -w 5 1 4 1.5","title":"gen room"},{"location":"manual/gen/room/#gen-room","text":"gen room [-h] [-v] <width> <depth> <floor-floor> <floor-ceiling> [options] This command generates a side-lit rectangular room model with width , depth , floor-floor , and floor-ceiling .","title":"gen room"},{"location":"manual/gen/room/#options","text":"-w Window[s], starting x, z, width, height. -n Model name -t Facade thickness. -r/--rotate Rotate the room counter-clockwise","title":"Options"},{"location":"manual/gen/room/#example","text":"Generate a room that's 12 unit wide, 14 unit deep and 3 unit height. gen room 12 14 3 Genearte the same room, adding two windows, each 4 unit wide and 1.5 unit in height. Viewing from outside, the lower left corner of the first window is 1 unit away from the left wall and 1 unit away from the floor. gen room 12 14 3 -w 1 1 4 1.5 -w 5 1 4 1.5","title":"Example"},{"location":"manual/gen/matrix/","text":"gen matrix gen matrix [-h] [-v] <sub-command> [options] matrix command consists of several sub-commands, each describe a specific type of matrix generation workflow. A matrix usually describes the flux-transport of a system, which usually has a light emitter and light receiver. Because we are dealing with backwards ray-tracing here, in which we are sending rays from the point-of-interests towards the light source, we will call the light emitter receiver and light receiver sender. Senders are usually our point-of-interests. A sender is a grid of points if we are interested in knowing how much light those grid of points receives. A sender is a view if we are interseted in knowing the rendered image from that view. A sender is a surface is we are interseted in know how much light that surface receives. Receiver are usually our light sources, such as sky, sun, or any surface that can be modeled as a light emitter (e.g., windows). Once we defined our senders and receivers, we quickly have a handful of scenarios that we need to handle. These scenarios are the system flux-tranport properties that came up usually in matrix-based simulation methods. As a results, matrix command consists of a series of sub-commands that handles each scenario. These sub-commands are usually in the form of a sender - receiver pair: Commands gen matrix point-sky gen matrix view-sky gen matrix surface-sky gen matrix point-surface gen matrix view-surface gen matrix surface-surface gen matrix point-sun gen matrix view-sun gen matrix ncp","title":"gen matrix"},{"location":"manual/gen/matrix/#gen-matrix","text":"gen matrix [-h] [-v] <sub-command> [options] matrix command consists of several sub-commands, each describe a specific type of matrix generation workflow. A matrix usually describes the flux-transport of a system, which usually has a light emitter and light receiver. Because we are dealing with backwards ray-tracing here, in which we are sending rays from the point-of-interests towards the light source, we will call the light emitter receiver and light receiver sender. Senders are usually our point-of-interests. A sender is a grid of points if we are interested in knowing how much light those grid of points receives. A sender is a view if we are interseted in knowing the rendered image from that view. A sender is a surface is we are interseted in know how much light that surface receives. Receiver are usually our light sources, such as sky, sun, or any surface that can be modeled as a light emitter (e.g., windows). Once we defined our senders and receivers, we quickly have a handful of scenarios that we need to handle. These scenarios are the system flux-tranport properties that came up usually in matrix-based simulation methods. As a results, matrix command consists of a series of sub-commands that handles each scenario. These sub-commands are usually in the form of a sender - receiver pair:","title":"gen matrix"},{"location":"manual/gen/matrix/#commands","text":"gen matrix point-sky gen matrix view-sky gen matrix surface-sky gen matrix point-surface gen matrix view-surface gen matrix surface-surface gen matrix point-sun gen matrix view-sun gen matrix ncp","title":"Commands"},{"location":"manual/gen/matrix/ncp/","text":"gen matrix ncp gen matrix ncp <window_file> <ncp_file> <model_files...> [options] gen matrix ncp genertate a matrix (or BSDF) that describeds the flux transport behavior of a non-coplanar shading system. The sender in this command is usually a window surface and the receiver is automatically generated that encompasses the non-coplanar shading system. The resulting matrix can be wrapped into a xml file and be used as a regular BSDF file. Options -b/--basis Window and receiving basis. (default: ['kf', 'kf']) -w/--wrap Generating a final xml file? (default: False) Example Generate a non-coplanar shading matrix (e.g. a drop-arm awning system), and wrap the matrix into a .xml file. $ gen matrix ncp window.rad awning.rad obj/materials.mat obj/room.rad -w","title":"ncp"},{"location":"manual/gen/matrix/ncp/#gen-matrix-ncp","text":"gen matrix ncp <window_file> <ncp_file> <model_files...> [options] gen matrix ncp genertate a matrix (or BSDF) that describeds the flux transport behavior of a non-coplanar shading system. The sender in this command is usually a window surface and the receiver is automatically generated that encompasses the non-coplanar shading system. The resulting matrix can be wrapped into a xml file and be used as a regular BSDF file.","title":"gen matrix ncp"},{"location":"manual/gen/matrix/ncp/#options","text":"-b/--basis Window and receiving basis. (default: ['kf', 'kf']) -w/--wrap Generating a final xml file? (default: False)","title":"Options"},{"location":"manual/gen/matrix/ncp/#example","text":"Generate a non-coplanar shading matrix (e.g. a drop-arm awning system), and wrap the matrix into a .xml file. $ gen matrix ncp window.rad awning.rad obj/materials.mat obj/room.rad -w","title":"Example"},{"location":"manual/gen/matrix/point_sky/","text":"gen matrix point-sky gen matrix point-sky [-h] [-v] <point_file> <model files...> [options] gen matrix point-sky generates the matrix for a two-phase simulation, where the sender is a grid of points (e.g., a series of workplane sensors) and the receiver is the descritized sky. By default the sky is in Reinhart sky 4-subdivision, which can be adjusted with the -b/--basis option. Options -b/--basis Sky basis, can be r1, r2, r4, r6 All rtrace options are recognized as well. Example Generate a grid to sky matrix, with a reinher subdivision 4 sky (default), and room geometry. gen matrix point-sky grid.pts obj/materials.mat obj/room.rad","title":"point-sky"},{"location":"manual/gen/matrix/point_sky/#gen-matrix-point-sky","text":"gen matrix point-sky [-h] [-v] <point_file> <model files...> [options] gen matrix point-sky generates the matrix for a two-phase simulation, where the sender is a grid of points (e.g., a series of workplane sensors) and the receiver is the descritized sky. By default the sky is in Reinhart sky 4-subdivision, which can be adjusted with the -b/--basis option.","title":"gen matrix point-sky"},{"location":"manual/gen/matrix/point_sky/#options","text":"-b/--basis Sky basis, can be r1, r2, r4, r6 All rtrace options are recognized as well.","title":"Options"},{"location":"manual/gen/matrix/point_sky/#example","text":"Generate a grid to sky matrix, with a reinher subdivision 4 sky (default), and room geometry. gen matrix point-sky grid.pts obj/materials.mat obj/room.rad","title":"Example"},{"location":"manual/gen/matrix/point_sun/","text":"gen matrix point-sun gen matrix point-sun <point_file> <model_files...> [options] gen matrix point-sun generate a point to sun matrix. This matrix is usually the direct-sun part of the five-phase simulation. It takes a point file as the first input, followed by the rest of the model files. Options -b/--basis Sun basis (default: r6) Example Generate a point to sun matrix (e.g., direct-sun matrix) gen matrix point-sun grid.pts obj/materials.mat obj/room.rad","title":"point-sun"},{"location":"manual/gen/matrix/point_sun/#gen-matrix-point-sun","text":"gen matrix point-sun <point_file> <model_files...> [options] gen matrix point-sun generate a point to sun matrix. This matrix is usually the direct-sun part of the five-phase simulation. It takes a point file as the first input, followed by the rest of the model files.","title":"gen matrix point-sun"},{"location":"manual/gen/matrix/point_sun/#options","text":"-b/--basis Sun basis (default: r6)","title":"Options"},{"location":"manual/gen/matrix/point_sun/#example","text":"Generate a point to sun matrix (e.g., direct-sun matrix) gen matrix point-sun grid.pts obj/materials.mat obj/room.rad","title":"Example"},{"location":"manual/gen/matrix/point_surface/","text":"gen matrix point-surface gen matrix point-surface [-h] [-v] <point_file> <surface_file> <model files...> [options] gen matrix point-surface generates a matrix that describes the flux-transport behavior between a grid of sensor and a surface, e.g., the view-matrix in a three-phase simulation. Options -b/--basis Surface basis (default: kf) -f/--offset Offset surface in its normal direction (default: 0) All rtrace options are recognized as well. Example Generate a point to surface matrix (e.g., view matrix) gen matrix point-surface window.rad obj/materials.mat obj/room.rad","title":"point-surface"},{"location":"manual/gen/matrix/point_surface/#gen-matrix-point-surface","text":"gen matrix point-surface [-h] [-v] <point_file> <surface_file> <model files...> [options] gen matrix point-surface generates a matrix that describes the flux-transport behavior between a grid of sensor and a surface, e.g., the view-matrix in a three-phase simulation.","title":"gen matrix point-surface"},{"location":"manual/gen/matrix/point_surface/#options","text":"-b/--basis Surface basis (default: kf) -f/--offset Offset surface in its normal direction (default: 0) All rtrace options are recognized as well.","title":"Options"},{"location":"manual/gen/matrix/point_surface/#example","text":"Generate a point to surface matrix (e.g., view matrix) gen matrix point-surface window.rad obj/materials.mat obj/room.rad","title":"Example"},{"location":"manual/gen/matrix/surface_sky/","text":"gen matrix surface-sky gen matrix surface-sky [-h] [-v] <surface_file> <model files...> [options] gen matrix surface-sky generates a matrix that describes the flux-transport behavior between the surface and the sky. This matrix is usually the daylight matrix in a three-phase simulation. This command takes in a surface object file as the first positional arguments, followed by the rest of the model files. Options -b/--basis Sky basis, can be r1, r2, r4, r6 -f/--offset Offset the surface in its normal direction (default: 0) All rtrace options are recognized as well. Example Generate a surface to sky matrix (e.g., daylight matrix), with a specific set of rcontrib options. gen matrix surface-sky window.rad obj/materials.mat obj/room.rad \\ -ab 2 -ad 64 -c 1000","title":"surface-sky"},{"location":"manual/gen/matrix/surface_sky/#gen-matrix-surface-sky","text":"gen matrix surface-sky [-h] [-v] <surface_file> <model files...> [options] gen matrix surface-sky generates a matrix that describes the flux-transport behavior between the surface and the sky. This matrix is usually the daylight matrix in a three-phase simulation. This command takes in a surface object file as the first positional arguments, followed by the rest of the model files.","title":"gen matrix surface-sky"},{"location":"manual/gen/matrix/surface_sky/#options","text":"-b/--basis Sky basis, can be r1, r2, r4, r6 -f/--offset Offset the surface in its normal direction (default: 0) All rtrace options are recognized as well.","title":"Options"},{"location":"manual/gen/matrix/surface_sky/#example","text":"Generate a surface to sky matrix (e.g., daylight matrix), with a specific set of rcontrib options. gen matrix surface-sky window.rad obj/materials.mat obj/room.rad \\ -ab 2 -ad 64 -c 1000","title":"Example"},{"location":"manual/gen/matrix/surface_surface/","text":"gen matrix surface-surface gen matrix surface-surface [-h] [-v] <sender_surface> <receiver_surface> \\ <model files...> [options] gen matrix surface-surface generate a matrix between two arbiturary surface[s]. This command can be used, for example, to generate a matrix describes the flux transport behavior of a tublar daylighting device. Options -b/--basis Sender and receiver sampling basis (default: (kf, kf)) -f/--offset Offset the sender and receiver surface in their normal directions (default: (0, 0)) All rtrace options are recognized as well. Example Generate a surface to surface matrix (e.g., for a tubular daylighting device) gen matrix surface-surface diffuser.rad tdd_dome.rad \\ obj/materials.mat obj/room.rad","title":"surface-surface"},{"location":"manual/gen/matrix/surface_surface/#gen-matrix-surface-surface","text":"gen matrix surface-surface [-h] [-v] <sender_surface> <receiver_surface> \\ <model files...> [options] gen matrix surface-surface generate a matrix between two arbiturary surface[s]. This command can be used, for example, to generate a matrix describes the flux transport behavior of a tublar daylighting device.","title":"gen matrix surface-surface"},{"location":"manual/gen/matrix/surface_surface/#options","text":"-b/--basis Sender and receiver sampling basis (default: (kf, kf)) -f/--offset Offset the sender and receiver surface in their normal directions (default: (0, 0)) All rtrace options are recognized as well.","title":"Options"},{"location":"manual/gen/matrix/surface_surface/#example","text":"Generate a surface to surface matrix (e.g., for a tubular daylighting device) gen matrix surface-surface diffuser.rad tdd_dome.rad \\ obj/materials.mat obj/room.rad","title":"Example"},{"location":"manual/gen/matrix/view_sky/","text":"gen matrix view-sky gen matrix view-sky [-h] [-v] <view_file> <model files...> [options] gen matrix view-sky generates the matrix for a two-phase simulation, where the sender is a grid of views (e.g., a series of workplane sensors) and the receiver is the descritized sky. By default the sky is in Reinhart sky 4-subdivision, which can be adjusted with the -b/--basis option. Options -b/--basis Sky basis, can be r1, r2, r4, r6 -r/--resolu Image resolution (default: 800) All rtrace options are recognized as well. Example Generate a view to sky matrix (rendering), with a reinhart subdivision 1 sky. gen matrix view-sky view1.vf obj/materials.mat obj/room.rad -b r1","title":"view-sky"},{"location":"manual/gen/matrix/view_sky/#gen-matrix-view-sky","text":"gen matrix view-sky [-h] [-v] <view_file> <model files...> [options] gen matrix view-sky generates the matrix for a two-phase simulation, where the sender is a grid of views (e.g., a series of workplane sensors) and the receiver is the descritized sky. By default the sky is in Reinhart sky 4-subdivision, which can be adjusted with the -b/--basis option.","title":"gen matrix view-sky"},{"location":"manual/gen/matrix/view_sky/#options","text":"-b/--basis Sky basis, can be r1, r2, r4, r6 -r/--resolu Image resolution (default: 800) All rtrace options are recognized as well.","title":"Options"},{"location":"manual/gen/matrix/view_sky/#example","text":"Generate a view to sky matrix (rendering), with a reinhart subdivision 1 sky. gen matrix view-sky view1.vf obj/materials.mat obj/room.rad -b r1","title":"Example"},{"location":"manual/gen/matrix/view_sun/","text":"gen matrix view-sun gen matrix view-sun [-h] [-v] <view_file> <model_files...> [options] gen matrix view-sun generate a view to sun matrix. This matrix is usually the direct-sun part of the five-phase simulation. Options -b/--basis Sun basis (default: r6) -w/--window Window file path[s]. (default: None) -s/--smx_path Sky matrix file path. (default: None) -r/--resolu Image resultion (default: 512x512) Example Generate a view to sun matrix (e.g., image-based direct-sun matrix), with sun-culling based on window normals and oakland annual sky matrix. gen matrix view-sun view1.vf obj/materials.mat obj/room.rad \\ -w window.rad -s oakland.smx","title":"view-sun"},{"location":"manual/gen/matrix/view_sun/#gen-matrix-view-sun","text":"gen matrix view-sun [-h] [-v] <view_file> <model_files...> [options] gen matrix view-sun generate a view to sun matrix. This matrix is usually the direct-sun part of the five-phase simulation.","title":"gen matrix view-sun"},{"location":"manual/gen/matrix/view_sun/#options","text":"-b/--basis Sun basis (default: r6) -w/--window Window file path[s]. (default: None) -s/--smx_path Sky matrix file path. (default: None) -r/--resolu Image resultion (default: 512x512)","title":"Options"},{"location":"manual/gen/matrix/view_sun/#example","text":"Generate a view to sun matrix (e.g., image-based direct-sun matrix), with sun-culling based on window normals and oakland annual sky matrix. gen matrix view-sun view1.vf obj/materials.mat obj/room.rad \\ -w window.rad -s oakland.smx","title":"Example"},{"location":"manual/gen/matrix/view_surface/","text":"gen matrix view-surface gen matrix view-surface [-h] [-v] <view_file> <model files...> [options] gen matrix view-surface generates a similar view matrix but with a view as a sender. Options -b/--basis Surface basis, default: kf -r/--resolu Image resolution (default: 800) -f/--offset Offset surface in its normal direction (default: 0) All rtrace options are recognized as well. Example Generate a view to surface matrix (e.g., image-based view matrix) $ gen matrix view-surface window.rad obj/materials.mat obj/room.rad","title":"view-surface"},{"location":"manual/gen/matrix/view_surface/#gen-matrix-view-surface","text":"gen matrix view-surface [-h] [-v] <view_file> <model files...> [options] gen matrix view-surface generates a similar view matrix but with a view as a sender.","title":"gen matrix view-surface"},{"location":"manual/gen/matrix/view_surface/#options","text":"-b/--basis Surface basis, default: kf -r/--resolu Image resolution (default: 800) -f/--offset Offset surface in its normal direction (default: 0) All rtrace options are recognized as well.","title":"Options"},{"location":"manual/gen/matrix/view_surface/#example","text":"Generate a view to surface matrix (e.g., image-based view matrix) $ gen matrix view-surface window.rad obj/materials.mat obj/room.rad","title":"Example"},{"location":"manual/mrad/","text":"mrad mrad [-h] [-v] <command> [options] You can complete an entire matrix-based simulation using the mrad program. In general there are two steps: Configure your model in the form of a configuration file (.cfg) Feed the configuration file to mrad for a completly automated simulation. A configuration file can be generated using the init subcommand (see blow). It also can be programmtically generated or even manually typed in. Details of the configuration files are described below. Commands mrad init mrad run Verbosity setting Verbosity, the amount of information printed to your terminal, can be adjusted by using the -v option. -v will display the most detailed information and -vvvv is effectively the silent mode. By default, only warning information is displayed. Instead of display information onto the terminal, all logging information can also be redirected as standard error into a file. -v = debug -vv = info -vvv = warning (default) -vvvv = critical Display help message Information regarding how to run mrad and its sub-command can be display on your terminal by giving -h/--help options. $ mrad -h or $ mrad <command> -h Configuration A configuration stores input data and file paths needed to carry out an entire simulation workflow. A configuration file (.cfg) can be typed in manually, programatically generated, or generated using the init command from the project root directory. The easiest way to generate template config file is to use mrad init command. To start with, the init command needs minimum a weather file path or a epw file path. A configuration file consists of four sections: SimControl , Site , Model , and RaySenders . SimControl These are the options availble under this section: vmx_basis : view matrix basis. vmx_opt : view matrix simulation options. dmx_opt : view matrix basis. fmx_basis : Facade matrix basis, basis used for generate non-coplanar matrices smx_basis : Sky matrix basis, which defines how fine to discretize the sky. Usually r1 or r4 for Tregenza or Reinhart Sky with 4 subdivisions. dsmx_opt : two-phase method matrix option. cdsmx_opt : Direct-sun coefficient matrices options. ray_count : Number of rays per sample. separate_direct : Whether to do a separate direct sun calculation. Turn this on to use five-phase method. nprocess : Number of processors to use. This only works on Linux and MacOS. overwrite : Whether to overwrite existing a matrices files. Site wea_path : wea file path epw_path : epw file path start_hour : Filter out hours in the weather files before this hour. end_hour : Filter out hours in the weather files after this hour. daylight_hours_only : Filter out non-daylight ours based on frads intern solar angle calculation. orientation : Set the model orientation. Model material : Material file paths. These files only contain material definitions scene : Object file paths. These files can include window files. If so, we will do two-phase simulation. windows : Window file paths. Each file contains a window group. window_xml : window_cfs : RaySenders grid_surface : surface geometry file (usually .rad) containing the surface polygon from which the grid will be based on. grid_spacing : Grid spacing in the model unit. grid_height : Grid height from the grid surface in the model unit. view : A view for rendering. This can be view describtion string or a view file defined as -vf view_file.vf . Default configuration The default configuration setting ( mrad_default.cfg ) can be found inside the data directory. This default setting is loaded with both init and run command. So any options that is not set with the user defined configuration file will be set according to the default configuration. The default configurations are: [DEFAULT] vmx_basis = kf vmx_opt = -ab 6 -ad 4096 -lw 0.0001 fmx_basis = kf smx_basis = r4 dmx_opt = -ab 2 -ad 128 -c 5000 dsmx_opt = -ab 8 -ad 4096 -lw 0.0001 -lr 8 cdsmx_opt = -ab 1 -dj 0 -st 0 cdsmx_basis = r6 ray_count = 1 nprocess = 1 separate_direct = False overwrite = False start_hour = 0 end_hour = 0 daylight_hours_only = True overwrite = True","title":"mrad"},{"location":"manual/mrad/#mrad","text":"mrad [-h] [-v] <command> [options] You can complete an entire matrix-based simulation using the mrad program. In general there are two steps: Configure your model in the form of a configuration file (.cfg) Feed the configuration file to mrad for a completly automated simulation. A configuration file can be generated using the init subcommand (see blow). It also can be programmtically generated or even manually typed in. Details of the configuration files are described below.","title":"mrad"},{"location":"manual/mrad/#commands","text":"mrad init mrad run","title":"Commands"},{"location":"manual/mrad/#verbosity-setting","text":"Verbosity, the amount of information printed to your terminal, can be adjusted by using the -v option. -v will display the most detailed information and -vvvv is effectively the silent mode. By default, only warning information is displayed. Instead of display information onto the terminal, all logging information can also be redirected as standard error into a file. -v = debug -vv = info -vvv = warning (default) -vvvv = critical","title":"Verbosity setting"},{"location":"manual/mrad/#display-help-message","text":"Information regarding how to run mrad and its sub-command can be display on your terminal by giving -h/--help options. $ mrad -h or $ mrad <command> -h","title":"Display help message"},{"location":"manual/mrad/#configuration","text":"A configuration stores input data and file paths needed to carry out an entire simulation workflow. A configuration file (.cfg) can be typed in manually, programatically generated, or generated using the init command from the project root directory. The easiest way to generate template config file is to use mrad init command. To start with, the init command needs minimum a weather file path or a epw file path. A configuration file consists of four sections: SimControl , Site , Model , and RaySenders .","title":"Configuration"},{"location":"manual/mrad/#simcontrol","text":"These are the options availble under this section: vmx_basis : view matrix basis. vmx_opt : view matrix simulation options. dmx_opt : view matrix basis. fmx_basis : Facade matrix basis, basis used for generate non-coplanar matrices smx_basis : Sky matrix basis, which defines how fine to discretize the sky. Usually r1 or r4 for Tregenza or Reinhart Sky with 4 subdivisions. dsmx_opt : two-phase method matrix option. cdsmx_opt : Direct-sun coefficient matrices options. ray_count : Number of rays per sample. separate_direct : Whether to do a separate direct sun calculation. Turn this on to use five-phase method. nprocess : Number of processors to use. This only works on Linux and MacOS. overwrite : Whether to overwrite existing a matrices files.","title":"SimControl"},{"location":"manual/mrad/#site","text":"wea_path : wea file path epw_path : epw file path start_hour : Filter out hours in the weather files before this hour. end_hour : Filter out hours in the weather files after this hour. daylight_hours_only : Filter out non-daylight ours based on frads intern solar angle calculation. orientation : Set the model orientation.","title":"Site"},{"location":"manual/mrad/#model","text":"material : Material file paths. These files only contain material definitions scene : Object file paths. These files can include window files. If so, we will do two-phase simulation. windows : Window file paths. Each file contains a window group. window_xml : window_cfs :","title":"Model"},{"location":"manual/mrad/#raysenders","text":"grid_surface : surface geometry file (usually .rad) containing the surface polygon from which the grid will be based on. grid_spacing : Grid spacing in the model unit. grid_height : Grid height from the grid surface in the model unit. view : A view for rendering. This can be view describtion string or a view file defined as -vf view_file.vf .","title":"RaySenders"},{"location":"manual/mrad/#default-configuration","text":"The default configuration setting ( mrad_default.cfg ) can be found inside the data directory. This default setting is loaded with both init and run command. So any options that is not set with the user defined configuration file will be set according to the default configuration. The default configurations are: [DEFAULT] vmx_basis = kf vmx_opt = -ab 6 -ad 4096 -lw 0.0001 fmx_basis = kf smx_basis = r4 dmx_opt = -ab 2 -ad 128 -c 5000 dsmx_opt = -ab 8 -ad 4096 -lw 0.0001 -lr 8 cdsmx_opt = -ab 1 -dj 0 -st 0 cdsmx_basis = r6 ray_count = 1 nprocess = 1 separate_direct = False overwrite = False start_hour = 0 end_hour = 0 daylight_hours_only = True overwrite = True","title":"Default configuration"},{"location":"manual/mrad/init/","text":"mrad init mrad init {-a wea_path | -e epw_path} [-n model_name] [-o object [object ...]] [-m material [material ...]] [-w window [window ...]] [-x xmls [xmls ...]] [-g surface_path spacing height] The init command can be used to initiate a mrad configuration file. init command provide a series of option to select files and define the model setup. Either a .wea or .epw file path need to be provided for init to run (described below). You will also need to define where are objects and material files. Although init doesn't require specifying grid of view files, you will need to define at least one of these, by manually typing in the configuration file, in order for mrad to carry out the actual simulation. Options -a/--wea_path WEA file path, which can be generated using epw2wea program, or generated using script. Some weather file site also provide wea file, such as Climate.OneBuilding.org . This option and -e/--epw_path option are mutually exclusive, and one of which is required by the init command. -e/--epw_path EnergyPlusWeather (EPW) file path. Can found at EnergyPlus website and Climate.OneBuilding.org . This option and -a/--wea_path option are mutually exclusive, and one of which is required by the init command. -n/--name Give your model a name. This name will be part of the file name of the results files. If you don't give one, the name of the configuration file will be used. -o/--object Object file path[s], usually with a .rad extension. You can use wildcard file matching, such as -o Objects/*.rad , which will load in all files that has a .rad file extension within the Objects directory. -m/--material material file path[s], usually with a .mat extension. You can use wildcard file matching, such as -o Objects/*.mat , which will load in all files that has a .mat file extension within the Objects directory. This implies that you will need to separate out your material definitions from the rest of your geometry definitions. In other words, these files should only contain material definitions. -w/--window Window file path[s], usually with a .rad extension. You can use wildcard, such as -o Objects/window*.rad , which will load in all files that starts with the word window and has a .rad file extension within the Objects directory. This implies that if you intent to have special treatments for different windows, e.g., swap different Window BSDF to compare performance, you will need to separate out the windows geometry definition from the rest of the model. If you intent to have different window groups, they need to also be grouped by files. -x/--xmls BSDf file path[s], usually with a .xml extension. You can use wildcard, such as -o Resources/*.xml , which will load in all files that has a .xml file extension within the Objects directory. You will need to define .xml files with a one-to-one mapping to the window files described above. This implies that the window geometry within a window file will have the same BSDF treatment as defined with this option. -g/--grid This option takes in three values: grid surface file path, grid spacing, and grid height. Grid surface file path is the file that contains a surface from which the grid will be constructed from. In most cases, this is the floor. Grid spacing and height are in the same unit that the model is using. A example us of this option can be: -g Objects/floor.rad 2 2.5 , which will define a 2x2 grid based on the floor.rad and 2.5 unit distance away from floor.rad . Example Here is an init example specifying an .epw file, material, objects and window files. mrad init -e ./Resources/USA_CA_Oakland.Intl.AP.724930_TMY3.epw -m Objects/material.mat -o Objects/wall.rad Objects/ceiling.rad Objects/floor.rad -w Objects/upper_glass.rad Objects/lower_glass.rad A default.cfg file is generated as shown below. Notice that SimControl and RaySender sectons are empty. You can configure SimControl as needed. Note that you will need to specify something in the RaySender section for simulation to run. [SimControl] [Site] epw_path = Resources/USA_CA_Oakland.Intl.AP.724930_TMY3.epw [Model] name = default scene = Objects/ceiling.rad Objects/walls.rad Objects/floor.rad material = Objects/materials.mat window_paths = Objects/upper_glass.rad Objects/lower_glass.rad [RaySender]","title":"mrad init"},{"location":"manual/mrad/init/#mrad-init","text":"mrad init {-a wea_path | -e epw_path} [-n model_name] [-o object [object ...]] [-m material [material ...]] [-w window [window ...]] [-x xmls [xmls ...]] [-g surface_path spacing height] The init command can be used to initiate a mrad configuration file. init command provide a series of option to select files and define the model setup. Either a .wea or .epw file path need to be provided for init to run (described below). You will also need to define where are objects and material files. Although init doesn't require specifying grid of view files, you will need to define at least one of these, by manually typing in the configuration file, in order for mrad to carry out the actual simulation.","title":"mrad init"},{"location":"manual/mrad/init/#options","text":"-a/--wea_path WEA file path, which can be generated using epw2wea program, or generated using script. Some weather file site also provide wea file, such as Climate.OneBuilding.org . This option and -e/--epw_path option are mutually exclusive, and one of which is required by the init command. -e/--epw_path EnergyPlusWeather (EPW) file path. Can found at EnergyPlus website and Climate.OneBuilding.org . This option and -a/--wea_path option are mutually exclusive, and one of which is required by the init command. -n/--name Give your model a name. This name will be part of the file name of the results files. If you don't give one, the name of the configuration file will be used. -o/--object Object file path[s], usually with a .rad extension. You can use wildcard file matching, such as -o Objects/*.rad , which will load in all files that has a .rad file extension within the Objects directory. -m/--material material file path[s], usually with a .mat extension. You can use wildcard file matching, such as -o Objects/*.mat , which will load in all files that has a .mat file extension within the Objects directory. This implies that you will need to separate out your material definitions from the rest of your geometry definitions. In other words, these files should only contain material definitions. -w/--window Window file path[s], usually with a .rad extension. You can use wildcard, such as -o Objects/window*.rad , which will load in all files that starts with the word window and has a .rad file extension within the Objects directory. This implies that if you intent to have special treatments for different windows, e.g., swap different Window BSDF to compare performance, you will need to separate out the windows geometry definition from the rest of the model. If you intent to have different window groups, they need to also be grouped by files. -x/--xmls BSDf file path[s], usually with a .xml extension. You can use wildcard, such as -o Resources/*.xml , which will load in all files that has a .xml file extension within the Objects directory. You will need to define .xml files with a one-to-one mapping to the window files described above. This implies that the window geometry within a window file will have the same BSDF treatment as defined with this option. -g/--grid This option takes in three values: grid surface file path, grid spacing, and grid height. Grid surface file path is the file that contains a surface from which the grid will be constructed from. In most cases, this is the floor. Grid spacing and height are in the same unit that the model is using. A example us of this option can be: -g Objects/floor.rad 2 2.5 , which will define a 2x2 grid based on the floor.rad and 2.5 unit distance away from floor.rad .","title":"Options"},{"location":"manual/mrad/init/#example","text":"Here is an init example specifying an .epw file, material, objects and window files. mrad init -e ./Resources/USA_CA_Oakland.Intl.AP.724930_TMY3.epw -m Objects/material.mat -o Objects/wall.rad Objects/ceiling.rad Objects/floor.rad -w Objects/upper_glass.rad Objects/lower_glass.rad A default.cfg file is generated as shown below. Notice that SimControl and RaySender sectons are empty. You can configure SimControl as needed. Note that you will need to specify something in the RaySender section for simulation to run. [SimControl] [Site] epw_path = Resources/USA_CA_Oakland.Intl.AP.724930_TMY3.epw [Model] name = default scene = Objects/ceiling.rad Objects/walls.rad Objects/floor.rad material = Objects/materials.mat window_paths = Objects/upper_glass.rad Objects/lower_glass.rad [RaySender]","title":"Example"},{"location":"manual/mrad/run/","text":"mrad run mrad run [cfg_path] Once we have a viable configuration file, we can use the run command to start the simulation. Once started, mrad will generate a Matrices and a Results directory at the current working directory. All of the essential matrix files will be stored inside the Matrices folders. Intermediate matrix files will be stored inside the system temp directory and removed after the simulation. All results will be saved to the Results directory. The output with -vv verbosity setting is similar to the following: ... 21-04-20 22:10:44 - frads.methods - INFO - Converting EPW to a .wea file 21-04-20 22:10:44 - frads.methods - Generating sku/sun matrix using command 21-04-20 22:10:44 - frads.methods - gendaymtx -of -m 4 /Users/taoning/Resources/USA_CA_Oakland.Intl.AP.724930_TMY3.wea 21-04-20 22:10:46 - frads.cli - INFO - Using two-phase method 21-04-20 22:10:46 - frads.methods - INFO - Computing for 2-phase sensor point matrices... 21-04-20 22:10:46 - frads.methods - INFO - Computing for image-based 2-phase matrices... 21-04-20 22:10:46 - frads.methods - INFO - Computing for 2-phase sensor grid results. 21-04-20 22:10:50 - frads.methods - INFO - Computing for 2-phase image-based results","title":"mrad run"},{"location":"manual/mrad/run/#mrad-run","text":"mrad run [cfg_path] Once we have a viable configuration file, we can use the run command to start the simulation. Once started, mrad will generate a Matrices and a Results directory at the current working directory. All of the essential matrix files will be stored inside the Matrices folders. Intermediate matrix files will be stored inside the system temp directory and removed after the simulation. All results will be saved to the Results directory. The output with -vv verbosity setting is similar to the following: ... 21-04-20 22:10:44 - frads.methods - INFO - Converting EPW to a .wea file 21-04-20 22:10:44 - frads.methods - Generating sku/sun matrix using command 21-04-20 22:10:44 - frads.methods - gendaymtx -of -m 4 /Users/taoning/Resources/USA_CA_Oakland.Intl.AP.724930_TMY3.wea 21-04-20 22:10:46 - frads.cli - INFO - Using two-phase method 21-04-20 22:10:46 - frads.methods - INFO - Computing for 2-phase sensor point matrices... 21-04-20 22:10:46 - frads.methods - INFO - Computing for image-based 2-phase matrices... 21-04-20 22:10:46 - frads.methods - INFO - Computing for 2-phase sensor grid results. 21-04-20 22:10:50 - frads.methods - INFO - Computing for 2-phase image-based results","title":"mrad run"}]}